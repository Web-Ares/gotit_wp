"use strict";!function(){$(function(){$.each($(".site__index-page"),function(){new e($(this))}),$.each($("body"),function(){new n($(this))}),$.each($(".site__header"),function(){new i($(this))}),$.each($(".main-slider"),function(){new t($(this))}),$.each($(".expertise__items"),function(){new o($(this))}),$.each($(".squad__items"),function(){new s($(this))}),$.each($(".our-clients__items"),function(){new r($(this))}),$.each($(".reviews"),function(){new a($(this))}),$.each($(".contacts__map"),function(){new l($(this))})});var e=function(e){var n,i=this,t=e,o=$(window),s=$("html, body"),r=!1,a=!1,l=!1,c=0,d=!1,w=t.find(".swiper-slide__content"),u=$(".main-slider"),f=u.find(".main-slider__btn-down"),p=function(){w.on({scroll:function(){if(d){var e=t.find(".site__index-swiper .swiper-slide-active"),i=e.find(".swiper-slide__content"),o=i.find(">div");_(i),b(i,o),a&&!l&&c<0&&(n.unlockSwipeToPrev(),n.enableMousewheelControl()),l&&!a&&c>0&&(n.unlockSwipeToNext(),n.enableMousewheelControl()),l||a||(n.lockSwipes(),n.disableMousewheelControl())}}}),o.on({resize:function(){if(o.width()>=768?d||(g(),d=!0):d&&(m(),d=!1),d){var e=t.find(".site__index-swiper .swiper-slide-active"),n=e.find(".swiper-slide__content"),i=n.find(">div");v(i),C()}}}),w.on({DOMMouseScroll:function(e){var i=e.originalEvent.detail;i&&(c=i>0?1:-1,h(c)),a&&!l&&c>0&&(n.lockSwipeToPrev(),n.disableMousewheelControl()),l&&!a&&c<0&&(n.lockSwipeToNext(),n.disableMousewheelControl()),a&&!l&&c<0&&(n.unlockSwipeToPrev(),n.enableMousewheelControl()),l&&!a&&c>0&&(n.unlockSwipeToNext(),n.enableMousewheelControl())},mousewheel:function(e){var i=e.originalEvent.wheelDelta;i&&(c=i>0?-1:1,h(c)),a&&!l&&c>0&&(n.lockSwipeToPrev(),n.disableMousewheelControl()),l&&!a&&c<0&&(n.lockSwipeToNext(),n.disableMousewheelControl()),a&&!l&&c<0&&(n.unlockSwipeToPrev(),n.enableMousewheelControl()),l&&!a&&c>0&&(n.unlockSwipeToNext(),n.enableMousewheelControl())}}),f.on({click:function(){return o.width()>=768?n.slideNext(!0,600):(s.stop(!0,!1),s.animate({scrollTop:u.innerHeight()},300)),!1}})},h=function(e){e<0&&a&&d&&(n.unlockSwipeToPrev(),n.enableMousewheelControl())},v=function(e){r=o.scrollTop()+o.height()>=e.innerHeight()},_=function(e){a=e.scrollTop()<=0},b=function(e,n){l=e.scrollTop()+o.height()>=n.innerHeight()},g=function(){n=new Swiper(".site__index-swiper",{direction:"vertical",spaceBetween:0,speed:700,slidesPerView:1,autoHeight:"auto",mousewheelControl:!0,onInit:function(e){var n=t.find(".site__index-swiper .swiper-slide-active"),i=n.find(".swiper-slide__content"),o=n.find(".swiper-slide__content>div");c=0,v(o),_(i),b(i,o),r?(e.unlockSwipes(),e.enableMousewheelControl()):(e.lockSwipes(),e.disableMousewheelControl(),e.disableKeyboardControl(),h(c))},onSlideChangeStart:function(e){var n=e.activeIndex;n>0?$(".logo_index").hide():$(".logo_index").show()},onSlideChangeEnd:function(e){var n=t.find(".site__index-swiper .swiper-slide-active"),i=n.find(".swiper-slide__content"),o=n.find(".swiper-slide__content>div");c=0,v(o),_(i),b(i,o),r?(e.unlockSwipes(),e.enableMousewheelControl()):(e.lockSwipes(),e.disableMousewheelControl(),e.disableKeyboardControl(),h(c))}})},m=function(){n.destroy(!0,!0)},C=function(){w.each(function(){var e=$(this),n=e.find(">div");e.innerHeight()>n.innerHeight()?e.addClass("centered"):e.removeClass("centered")})},x=function(){t[0].obj=i,p(),o.width()>=768&&(d||(g(),C(),d=!0))};x()},n=function(e){var n=this,i=e,t=$(window),o=$("body"),s=function(){t.on({resize:function(){t.width()>=1024?a():o.css({"font-size":"75px"})}})},r=function(){s(),t.width()>=1024&&a(),i[0].obj=n},a=function(){var e;e=t.height()>500?100*(window.innerHeight/900)+"px":100*(500/900)+"px",o.css({"font-size":e})};r()},i=function(e){var n=this,i=e,t=$(window),o=i.find(".site__header__btn"),s=i.find(".site__header-menu"),r=$("html"),a=$("body"),l=function(){i.removeClass("opened"),r.css({"overflow-y":"auto"}),a.css({"overflow-y":"auto"}),s.attr("style","")},c=function(){t.on({resize:function(){i.hasClass("opened")&&l()}}),o.on({click:function(){return i.hasClass("opened")?l():d(),!1}})},d=function(){i.addClass("opened"),r.css({"overflow-y":"hidden"}),a.css({"overflow-y":"hidden"})},w=function(){c(),i[0].obj=n};w()},t=function(e){var n,i=this,t=e,o=$(window),s=$(".site__header"),r=t.find(".vegetable1"),a=t.find(".vegetable2"),l=t.find(".vegetable3"),c=t.find(".vegetable4"),d=t.find(".vegetable5"),w=15,u=10,f=5,p=20,h=25,v=function(){o.on({mousemove:function(e){if(o.width()>1024&&!s.hasClass("opened")){var n=e.pageX,i=e.pageY,v=t.width()/2,_=t.height()/2,$=(n-v)/v,m=(i-_)/_;o.outerWidth()>768&&(b($,m,w,r),g($,m,u,a),g($,m,f,l),b($,m,p,c),b($,m,h,d))}}})},_=function(){n=new Swiper(t.find(".swiper-container"),{spaceBetween:0,slidesPerView:1,nextButton:t.find(".swiper-button-next")[0],prevButton:t.find(".swiper-button-prev")[0]})},b=function(e,n,i,t){t.css({"-webkit-transform":"translate( "+-(e*i)+"px,"+-(n*i)+"px )",transform:"translate( "+-(e*i)+"px, "+-(n*i)+"px  )"})},g=function(e,n,i,t){t.css({"-webkit-transform":"translate( "+e*i+"px ,"+n*i+"px  )",transform:"translate( "+e*i+"px , "+n*i+"px  )"})},m=function(){t[0].obj=i,v(),_()};m()},o=function(e){var n,i=this,t=e,o=$(window),s=!1,r=function(){o.on({resize:function(){o.width()<768?s||(a(),s=!0):s&&(l(),s=!1)}})},a=function(){n=new Swiper(t.find(".swiper-container"),{slidesPerView:1.9,centeredSlides:!0})},l=function(){n.destroy(!0,!0)},c=function(){t[0].obj=i,r(),o.width()<768&&(s||(a(),s=!0))};c()},s=function(e){var n,i=this,t=e,o=$(window),s=!1,r=function(){o.on({resize:function(){o.width()<768?s||(a(),s=!0):s&&(l(),s=!1)}})},a=function(){n=new Swiper(t.find(".swiper-container"),{slidesPerView:1.75,centeredSlides:!0})},l=function(){n.destroy(!0,!0)},c=function(){t[0].obj=i,r(),o.width()<768&&(s||(a(),s=!0))};c()},r=function(e){var n,i=this,t=e,o=$(window),s=function(){o.on({resize:function(){}})},r=function(){n=new Swiper(t.find(".swiper-container"),{slidesPerView:5,nextButton:t.find(".swiper-button-next")[0],prevButton:t.find(".swiper-button-prev")[0],breakpoints:{1024:{slidesPerView:3},768:{slidesPerView:1}}})},a=function(){t[0].obj=i,s(),r()};a()},a=function(e){var n,i=this,t=e,o=$(window),s=function(){o.on({resize:function(){}})},r=function(){n=new Swiper(t.find(".swiper-container"),{slidesPerView:1,spaceBetween:30,loop:!0,autoplay:7e3,autoplayDisableOnInteraction:!1,nextButton:t.find(".swiper-button-next")[0],prevButton:t.find(".swiper-button-prev")[0]})},a=function(){t[0].obj=i,s(),r()};a()},l=function(e){var n,i,t=e,o=t.find("#contact-google-map"),s=o.data("map-lat"),r=o.data("map-lng"),a=o.data("map-zoom"),l=$(".contacts__cities .btn"),c=function(){l.on({click:function(){var e=$(this);if(!e.hasClass("active")){l.removeClass("active"),e.addClass("active");var t={lat:$(this).data("map-lat"),lng:$(this).data("map-lng")};i.setPosition(t),setTimeout(function(){google.maps.event.trigger(n,"resize"),n.setCenter(t)},300)}}})},d=function(){var e=new google.maps.StyledMapType([],{name:"Custom Style"}),t="custom_style";n=new google.maps.Map(o[0],{zoom:a,center:{lat:s,lng:r},mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,t]}}),i=new google.maps.Marker({position:{lat:s,lng:r},map:n}),n.mapTypes.set(t,e),n.setMapTypeId(t)},w=function(){google.maps.event.addDomListener(window,"load",d),c()};w()}}();
//# sourceMappingURL=data:application/json;base64,
