!function(){$(function(){$(".phone").each(function(){new n($(this))})});var n=function(n){var t=this,a=n,o=a.find(".phone__elem"),s=$(window),r=function(){s.on({scroll:function(){s.width()>=768&&c()}})},c=function(){var n,t=s.height(),o=(a.find(".pnone__part"),a.offset().top),r=o-t/2.5,c=o-t/15;s.scrollTop()<r?n=0:s.scrollTop()>c&&(n=1),s.scrollTop()>r&&!(s.scrollTop()>c)&&(n="animation"),l(r,c,n)},l=function(n,t,a){var r=t-n;o.each(function(){var t=$(this),o=0,c=1,l=t.data("translate"),e=t.data("scale"),i=(l-o)/r*(s.scrollTop()-n),f=c+(e-c)/r*(s.scrollTop()-n);0==a?t.css({"-webkit-transform":"translateY("+o+"%) scale( "+c+" )",transform:"translateY("+o+"%) scale( "+c+" )"}):1==a?t.css({"-webkit-transform":"translateY("+l+"%) scale( "+e+" )",transform:"translateY("+l+"%) scale( "+e+" )"}):t.css({"-webkit-transform":"translateY("+i+"%) scale( "+f+" )",transform:"translateY("+i+"%) scale( "+f+" )"})})},e=function(){a[0].obj=t,c(),r()};e()}}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5waG9uZS5qcyJdLCJuYW1lcyI6WyIkIiwiZWFjaCIsIlBob25lIiwidGhpcyIsIm9iaiIsIl9zZWxmIiwiX29iaiIsIl9waG9uZUVsZW1zIiwiZmluZCIsIl93aW5kb3ciLCJ3aW5kb3ciLCJfb25FdmVudHMiLCJvbiIsInNjcm9sbCIsIndpZHRoIiwiX2NoZWNrU2Nyb2xsIiwic2Nyb2xsUG9pbnQiLCJ3aW5kb3dIIiwiaGVpZ2h0IiwidG9wUG9zIiwib2Zmc2V0IiwidG9wIiwic3RhcnQiLCJlbmQiLCJzY3JvbGxUb3AiLCJfYW5pbWF0aW9uRWxlbXMiLCJzdGFydFBvaW50IiwiZW5kUG9pbnQiLCJzZWdtZW50IiwiY3VyRWxlbSIsInRyYW5zbGF0ZVN0YXJ0Iiwic2NhbGVTdGFydCIsInRyYW5zbGF0ZUVuZCIsImRhdGEiLCJzY2FsZUVuZCIsImtvb2ZUcmFuc2xhdGUiLCJrb29mU2NhbGUiLCJjc3MiLCItd2Via2l0LXRyYW5zZm9ybSIsInRyYW5zZm9ybSIsIl9pbml0Il0sIm1hcHBpbmdzIjoiQ0FBQSxXQUVJQSxFQUFHLFdBRUNBLEVBQUcsVUFBV0MsS0FBTSxXQUVoQixHQUFJQyxHQUFPRixFQUFFRyxVQU1yQixJQUFJRCxHQUFRLFNBQVVFLEdBR2xCLEdBQUlDLEdBQVFGLEtBQ1JHLEVBQU9GLEVBQ1BHLEVBQWNELEVBQUtFLEtBQUssZ0JBQ3hCQyxFQUFVVCxFQUFHVSxRQUdiQyxFQUFZLFdBRVJGLEVBQVFHLElBQ0pDLE9BQVEsV0FFQUosRUFBUUssU0FBVyxLQUVuQkMsUUFRaEJBLEVBQWUsV0FFWCxHQUtJQyxHQUxBQyxFQUFVUixFQUFRUyxTQUVsQkMsR0FEV2IsRUFBS0UsS0FBTSxnQkFDYkYsRUFBS2MsU0FBU0MsS0FDdkJDLEVBQVFILEVBQVNGLEVBQVEsSUFDekJNLEVBQU1KLEVBQVNGLEVBQVEsRUFHdEJSLEdBQVFlLFlBQWNGLEVBRXZCTixFQUFjLEVBRU5QLEVBQVFlLFlBQWNELElBRTlCUCxFQUFjLEdBSWRQLEVBQVFlLFlBQWNGLEtBQVliLEVBQVFlLFlBQWNELEtBRXhEUCxFQUFjLGFBSWxCUyxFQUFpQkgsRUFBT0MsRUFBS1AsSUFHakNTLEVBQWtCLFNBQVVDLEVBQVlDLEVBQVVYLEdBRTlDLEdBQUlZLEdBQVVELEVBQVdELENBRXpCbkIsR0FBWU4sS0FBSyxXQUViLEdBQUk0QixHQUFVN0IsRUFBR0csTUFDYjJCLEVBQWlCLEVBQ2pCQyxFQUFhLEVBQ2JDLEVBQWVILEVBQVFJLEtBQUssYUFDNUJDLEVBQVdMLEVBQVFJLEtBQUssU0FDeEJFLEdBQWtCSCxFQUFlRixHQUFtQkYsR0FBWW5CLEVBQVFlLFlBQWNFLEdBQ3RGVSxFQUFZTCxHQUFlRyxFQUFXSCxHQUFlSCxHQUFZbkIsRUFBUWUsWUFBY0UsRUFHdkUsSUFBZlYsRUFFRGEsRUFBUVEsS0FFSkMsb0JBQXFCLGNBQWVSLEVBQWdCLGFBQWFDLEVBQVcsS0FDNUVRLFVBQWEsY0FBZVQsRUFBZ0IsYUFBYUMsRUFBVyxPQUlqRCxHQUFmZixFQUVSYSxFQUFRUSxLQUVKQyxvQkFBcUIsY0FBZU4sRUFBYyxhQUFhRSxFQUFTLEtBQ3hFSyxVQUFhLGNBQWVQLEVBQWMsYUFBYUUsRUFBUyxPQU1wRUwsRUFBUVEsS0FFSkMsb0JBQXFCLGNBQWVILEVBQWUsYUFBYUMsRUFBVSxLQUMxRUcsVUFBYSxjQUFlSixFQUFlLGFBQWFDLEVBQVUsVUFRbEZJLEVBQVEsV0FFSmxDLEVBQU0sR0FBSUYsSUFBTUMsRUFDaEJVLElBQ0FKLElBR1I2QiIsImZpbGUiOiJwaG9uZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoIGZ1bmN0aW9uKCkge1xuXG4gICAgJCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgJCggJy5waG9uZScgKS5lYWNoKCBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICBuZXcgUGhvbmUoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICB9ICk7XG5cbiAgICB2YXIgUGhvbmUgPSBmdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX3Bob25lRWxlbXMgPSBfb2JqLmZpbmQoJy5waG9uZV9fZWxlbScpLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyApO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfb25FdmVudHMgPSBmdW5jdGlvbigpICB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKHtcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfd2luZG93LndpZHRoKCkgPj0gNzY4KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jaGVja1Njcm9sbCA9IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICB2YXIgd2luZG93SCA9IF93aW5kb3cuaGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgIGN1ckl0ZW1zID0gX29iai5maW5kKCAnLnBub25lX19wYXJ0JyApLFxuICAgICAgICAgICAgICAgICAgICB0b3BQb3MgPSBfb2JqLm9mZnNldCgpLnRvcCxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSB0b3BQb3MgLSB3aW5kb3dILzIuNSxcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gdG9wUG9zIC0gd2luZG93SC8xNSxcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsUG9pbnQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoIF93aW5kb3cuc2Nyb2xsVG9wKCkgPCBzdGFydCApIHtcblxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxQb2ludCA9IDA7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBfd2luZG93LnNjcm9sbFRvcCgpID4gZW5kICkge1xuXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFBvaW50ID0gMTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LnNjcm9sbFRvcCgpID4gc3RhcnQgJiYgISggX3dpbmRvdy5zY3JvbGxUb3AoKSA+IGVuZCApICl7XG5cbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsUG9pbnQgPSAnYW5pbWF0aW9uJztcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9hbmltYXRpb25FbGVtcyggc3RhcnQsIGVuZCwgc2Nyb2xsUG9pbnQgKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9hbmltYXRpb25FbGVtcyA9IGZ1bmN0aW9uIChzdGFydFBvaW50LCBlbmRQb2ludCwgc2Nyb2xsUG9pbnQpIHtcblxuICAgICAgICAgICAgICAgIHZhciBzZWdtZW50ID0gZW5kUG9pbnQgLSBzdGFydFBvaW50O1xuXG4gICAgICAgICAgICAgICAgX3Bob25lRWxlbXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckVsZW0gPSAkKCB0aGlzICksXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVTdGFydCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVN0YXJ0ID0gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUVuZCA9IGN1ckVsZW0uZGF0YSgndHJhbnNsYXRlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZUVuZCA9IGN1ckVsZW0uZGF0YSgnc2NhbGUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtvb2ZUcmFuc2xhdGUgPSAoIHRyYW5zbGF0ZUVuZCAtIHRyYW5zbGF0ZVN0YXJ0ICkgLyBzZWdtZW50ICogKCBfd2luZG93LnNjcm9sbFRvcCgpIC0gc3RhcnRQb2ludCApLFxuICAgICAgICAgICAgICAgICAgICAgICAga29vZlNjYWxlID0gc2NhbGVTdGFydCArICggc2NhbGVFbmQgLSBzY2FsZVN0YXJ0ICkgLyBzZWdtZW50ICogKCBfd2luZG93LnNjcm9sbFRvcCgpIC0gc3RhcnRQb2ludCApO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzY3JvbGxQb2ludCA9PSAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJFbGVtLmNzcygge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVkoJyArdHJhbnNsYXRlU3RhcnQrICclKSBzY2FsZSggJytzY2FsZVN0YXJ0KycgKScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGVZKCcgK3RyYW5zbGF0ZVN0YXJ0KyAnJSkgc2NhbGUoICcrc2NhbGVTdGFydCsnICknXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBzY3JvbGxQb2ludCA9PSAxICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJFbGVtLmNzcygge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVkoJyArdHJhbnNsYXRlRW5kKyAnJSkgc2NhbGUoICcrc2NhbGVFbmQrJyApJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVkoJyArdHJhbnNsYXRlRW5kKyAnJSkgc2NhbGUoICcrc2NhbGVFbmQrJyApJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyRWxlbS5jc3MoIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICd0cmFuc2xhdGVZKCcgK2tvb2ZUcmFuc2xhdGUrICclKSBzY2FsZSggJytrb29mU2NhbGUrJyApJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVkoJyAra29vZlRyYW5zbGF0ZSsgJyUpIHNjYWxlKCAnK2tvb2ZTY2FsZSsnICknXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfb2JqWyAwIF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCk7XG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxufSApKCk7XG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
