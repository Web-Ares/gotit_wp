"use strict";!function(){$(function(){$.each($(".squad__items"),function(){new n($(this))}),$.each($(".our-clients__items"),function(){new i($(this))})});var n=function(n){var i,t=this,e=n,o=$(window),s=!1,r=$(".squad"),u=$(".squad__disk"),c=function(){o.on({load:function(){o.width()>=768&&f()},resize:function(){o.width()<768?(s||(d(),s=!0),u.attr("style","")):(s&&(w(),s=!1),f())}})},d=function(){i=new Swiper(e.find(".swiper-container"),{slidesPerView:1.75,centeredSlides:!0})},w=function(){i.destroy(!0,!0)},f=function(){var n,i=r.innerHeight(),t=r.innerWidth();n=i>t?t:i,u.width(n),u.height(n),u.css({"margin-top":"-"+n/2+"px","margin-left":"-"+n/2+"px"})},a=function(){e[0].obj=t,c(),o.width()<768&&(s||(d(),s=!0))};a()},i=function(n){var i,t=this,e=n,o=$(window),s=!1,r=function(){o.on({resize:function(){o.width()<1024?s||(u(),s=!0):s&&(c(),s=!1)}})},u=function(){i=new Swiper(e.find(".swiper-container"),{slidesPerView:5,nextButton:e.find(".swiper-button-next")[0],prevButton:e.find(".swiper-button-prev")[0],breakpoints:{1024:{slidesPerView:3},768:{slidesPerView:1,loop:!0,autoplayDisableOnInteraction:!1}}})},c=function(){i.destroy(!0,!0)},d=function(){e[0].obj=t,r(),o.width()<1024&&(s||(u(),s=!0))};d()}}();
"use strict";!function(){$(function(){$.each($(".bubbles"),function(){new i($(this))})});var i=function(i){var n,t=this,a=i,h=$(window),c=function(){h.on({resize:function(){n=h.height(),a.height(n)}})},e=function(){for(var i=30,n=0;n<=i;n++){var t=Math.ceil(50*Math.random()),h=Math.ceil(50*Math.random()),c=Math.ceil(10*Math.random()),e=Math.ceil(5*Math.random()),o=Math.ceil(5*Math.random());a.append('<div class="bubble moving'+t+" pos"+h+'"><div class="scale'+c+'"><div class="shake'+o+'"><span class="item stretch'+e+'"></span></div></div>')}},o=function(){n=h.height(),a.height(n)},s=function(){a[0].obj=t,c(),e(),o()};s()}}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5pbmRleC5qcyIsImpxdWVyeS5idWJibGUuanMiXSwibmFtZXMiOlsiJCIsImVhY2giLCJTcXVhZFNsaWRlciIsInRoaXMiLCJDbGllbnRzU2xpZGVyIiwib2JqIiwiX3N3aXBlciIsIl9zZWxmIiwiX29iaiIsIl93aW5kb3ciLCJ3aW5kb3ciLCJfc3dpcGVySW5pdCIsIl9zcXVhZCIsIl9zcXVhZERpc2siLCJfYWRkRXZlbnRzIiwib24iLCJsb2FkIiwid2lkdGgiLCJfc2V0RGlza1NpemUiLCJyZXNpemUiLCJfaW5pdFN3aXBlciIsImF0dHIiLCJfZGVzdHJveVN3aXBlciIsIlN3aXBlciIsImZpbmQiLCJzbGlkZXNQZXJWaWV3IiwiY2VudGVyZWRTbGlkZXMiLCJkZXN0cm95IiwibmV3U2l6ZSIsImhlaWdodCIsImlubmVySGVpZ2h0IiwiaW5uZXJXaWR0aCIsImNzcyIsIm1hcmdpbi10b3AiLCJtYXJnaW4tbGVmdCIsIl9pbml0IiwibmV4dEJ1dHRvbiIsInByZXZCdXR0b24iLCJicmVha3BvaW50cyIsIjEwMjQiLCI3NjgiLCJsb29wIiwiYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbiIsIkJ1YmJsZXMiLCJfd2luSGVpZ2h0IiwiX2FkZEJ1YmJsZXMiLCJpdGVtcyIsImkiLCJtb3ZlIiwiTWF0aCIsImNlaWwiLCJyYW5kb20iLCJwb3MiLCJzY2FsZSIsInN0cmV0Y2giLCJzaGFrZSIsImFwcGVuZCIsIl9zZXRIZWlnaHQiXSwibWFwcGluZ3MiOiJBQUFBLGNBQ0EsV0FFSUEsRUFBRyxXQUVDQSxFQUFFQyxLQUFNRCxFQUFFLGlCQUFrQixXQUV4QixHQUFJRSxHQUFhRixFQUFFRyxTQUl2QkgsRUFBRUMsS0FBTUQsRUFBRSx1QkFBd0IsV0FFOUIsR0FBSUksR0FBZUosRUFBRUcsVUFPN0IsSUFBSUQsR0FBYyxTQUFXRyxHQUV6QixHQUlJQyxHQUpBQyxFQUFRSixLQUNSSyxFQUFPSCxFQUNQSSxFQUFVVCxFQUFHVSxRQUNiQyxHQUFj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ImluZGV4Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuKCBmdW5jdGlvbigpIHtcblxuICAgICQoIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICQuZWFjaCggJCgnLnNxdWFkX19pdGVtcycpLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBTcXVhZFNsaWRlciggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoJy5vdXItY2xpZW50c19faXRlbXMnKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgQ2xpZW50c1NsaWRlciggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuXG4gICAgfSApO1xuXG4gICAgdmFyIFNxdWFkU2xpZGVyID0gZnVuY3Rpb24gKCBvYmogKSB7XG5cbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXG4gICAgICAgICAgICBfc3dpcGVySW5pdCA9IGZhbHNlLFxuICAgICAgICAgICAgX3N3aXBlcixcbiAgICAgICAgICAgIF9zcXVhZCA9ICQoJy5zcXVhZCcpLFxuICAgICAgICAgICAgX3NxdWFkRGlzayA9ICQoJy5zcXVhZF9fZGlzaycpO1xuXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICBsb2FkOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSA3NjggKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2V0RGlza1NpemUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA8IDc2OCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhX3N3aXBlckluaXQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2luaXRTd2lwZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3N3aXBlckluaXQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NxdWFkRGlzay5hdHRyKCdzdHlsZScsJycpXG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfc3dpcGVySW5pdCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZGVzdHJveVN3aXBlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc3dpcGVySW5pdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zZXREaXNrU2l6ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXRTd2lwZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF9zd2lwZXIgPSBuZXcgU3dpcGVyKCBfb2JqLmZpbmQoICcuc3dpcGVyLWNvbnRhaW5lcicgKSwge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLjc1LFxuICAgICAgICAgICAgICAgICAgICBjZW50ZXJlZFNsaWRlczogdHJ1ZVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9kZXN0cm95U3dpcGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfc3dpcGVyLmRlc3Ryb3koIHRydWUsIHRydWUpO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NldERpc2tTaXplID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gX3NxdWFkLmlubmVySGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gX3NxdWFkLmlubmVyV2lkdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZTtcblxuICAgICAgICAgICAgICAgIGlmKCBoZWlnaHQgPiB3aWR0aCApIHtcblxuICAgICAgICAgICAgICAgICAgICBuZXdTaXplICA9IHdpZHRoXG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIG5ld1NpemUgID0gaGVpZ2h0XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfc3F1YWREaXNrLndpZHRoKCBuZXdTaXplICk7XG4gICAgICAgICAgICAgICAgX3NxdWFkRGlzay5oZWlnaHQoIG5ld1NpemUgKTtcbiAgICAgICAgICAgICAgICBfc3F1YWREaXNrLmNzcygge1xuXG4gICAgICAgICAgICAgICAgICAgICdtYXJnaW4tdG9wJzogJy0nICtuZXdTaXplLzIrICdweCcsXG4gICAgICAgICAgICAgICAgICAgICdtYXJnaW4tbGVmdCc6ICctJyArbmV3U2l6ZS8yKyAncHgnXG5cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbMF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuXG4gICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA8IDc2OCApIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiggIV9zd2lwZXJJbml0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5pdFN3aXBlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N3aXBlckluaXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIENsaWVudHNTbGlkZXIgPSBmdW5jdGlvbiAoIG9iaiApIHtcblxuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKCB3aW5kb3cgKSxcbiAgICAgICAgICAgIF9zd2lwZXJJbml0ID0gZmFsc2UsXG4gICAgICAgICAgICBfc3dpcGVyO1xuXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpIDwgMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhX3N3aXBlckluaXQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2luaXRTd2lwZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3N3aXBlckluaXQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX3N3aXBlckluaXQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Rlc3Ryb3lTd2lwZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3N3aXBlckluaXQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXRTd2lwZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF9zd2lwZXIgPSBuZXcgU3dpcGVyKCBfb2JqLmZpbmQoICcuc3dpcGVyLWNvbnRhaW5lcicgKSwge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiA1LFxuICAgICAgICAgICAgICAgICAgICBuZXh0QnV0dG9uOiBfb2JqLmZpbmQoJy5zd2lwZXItYnV0dG9uLW5leHQnKVswXSxcbiAgICAgICAgICAgICAgICAgICAgcHJldkJ1dHRvbjogX29iai5maW5kKCcuc3dpcGVyLWJ1dHRvbi1wcmV2JylbMF0sXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAxMDI0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogM1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDc2ODoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9vcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2Rlc3Ryb3lTd2lwZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF9zd2lwZXIuZGVzdHJveSggdHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbMF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuXG4gICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA8IDEwMjQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoICFfc3dpcGVySW5pdCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2luaXRTd2lwZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zd2lwZXJJbml0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxufSApKCk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbiggZnVuY3Rpb24oKSB7XG5cblx0JCggZnVuY3Rpb24oKSB7XG5cblx0XHQkLmVhY2goICQoJy5idWJibGVzJyksIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0bmV3IEJ1YmJsZXMoICQodGhpcykgKTtcblxuXHRcdH0gKTtcblxuXG5cdH0gKTtcblxuXHR2YXIgQnViYmxlcyA9IGZ1bmN0aW9uICggb2JqICkge1xuXG5cdFx0dmFyIF9zZWxmID0gdGhpcyxcblx0XHRcdF9vYmogPSBvYmosXG5cdFx0XHRfd2luZG93ID0gJCggd2luZG93KSxcblx0XHRcdF93aW5IZWlnaHQ7XG5cblx0XHR2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRfd2luZG93Lm9uKCB7XG5cdFx0XHRcdFx0cmVzaXplOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0X3dpbkhlaWdodCA9IF93aW5kb3cuaGVpZ2h0KCk7XG5cdFx0XHRcdFx0XHRfb2JqLmhlaWdodCggX3dpbkhlaWdodCApO1xuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH0sXG5cdFx0XHRfYWRkQnViYmxlcyA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdHZhciBpdGVtcyA9IDMwO1xuXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDw9IGl0ZW1zOyBpKyspIHtcblxuXHRcdFx0XHRcdHZhciBtb3ZlID0gTWF0aC5jZWlsKCBNYXRoLnJhbmRvbSgpKjUwICk7XG5cdFx0XHRcdFx0dmFyIHBvcyA9IE1hdGguY2VpbCggTWF0aC5yYW5kb20oKSo1MCApO1xuXHRcdFx0XHRcdHZhciBzY2FsZSA9IE1hdGguY2VpbCggTWF0aC5yYW5kb20oKSoxMCApO1xuXHRcdFx0XHRcdHZhciBzdHJldGNoID0gTWF0aC5jZWlsKCBNYXRoLnJhbmRvbSgpKjUgKTtcblx0XHRcdFx0XHR2YXIgc2hha2UgPSBNYXRoLmNlaWwoIE1hdGgucmFuZG9tKCkqNSApO1xuXHRcdFx0XHRcdF9vYmouYXBwZW5kKCc8ZGl2IGNsYXNzPVwiYnViYmxlIG1vdmluZycrbW92ZSsnIHBvcycrcG9zKydcIj48ZGl2IGNsYXNzPVwic2NhbGUnK3NjYWxlKydcIj48ZGl2IGNsYXNzPVwic2hha2UnK3NoYWtlKydcIj48c3BhbiBjbGFzcz1cIml0ZW0gc3RyZXRjaCcrc3RyZXRjaCsnXCI+PC9zcGFuPjwvZGl2PjwvZGl2PicpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblx0XHRcdF9zZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRfd2luSGVpZ2h0ID0gX3dpbmRvdy5oZWlnaHQoKTtcblx0XHRcdFx0X29iai5oZWlnaHQoIF93aW5IZWlnaHQgKTtcblxuXHRcdFx0fSxcblx0XHRcdF9pbml0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdF9vYmpbMF0ub2JqID0gX3NlbGY7XG5cdFx0XHRcdF9hZGRFdmVudHMoKTtcblx0XHRcdFx0X2FkZEJ1YmJsZXMoKTtcblx0XHRcdFx0X3NldEhlaWdodCgpO1xuXG5cdFx0XHR9O1xuXG5cdFx0X2luaXQoKTtcblx0fTtcblxufSApKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
