"use strict";!function(){$(function(){$.each($(".squad__items"),function(){new n($(this))}),$.each($(".our-clients__items"),function(){new i($(this))})});var n=function(n){var i,t=this,e=n,o=$(window),s=!1,r=$(".squad"),u=$(".squad__disk"),c=function(){o.on({load:function(){o.width()>=768&&f()},resize:function(){o.width()<768?(s||(d(),s=!0),u.attr("style","")):(s&&(w(),s=!1),f())}})},d=function(){i=new Swiper(e.find(".swiper-container"),{slidesPerView:1.75,centeredSlides:!0})},w=function(){i.destroy(!0,!0)},f=function(){var n,i=r.innerHeight(),t=r.innerWidth();n=i>t?t:i,u.width(n),u.height(n),u.css({"margin-top":"-"+n/2+"px","margin-left":"-"+n/2+"px"})},a=function(){e[0].obj=t,c(),o.width()<768&&(s||(d(),s=!0))};a()},i=function(n){var i,t=this,e=n,o=$(window),s=!1,r=function(){o.on({resize:function(){o.width()<1024?s||(u(),s=!0):s&&(c(),s=!1)}})},u=function(){i=new Swiper(e.find(".swiper-container"),{slidesPerView:5,nextButton:e.find(".swiper-button-next")[0],prevButton:e.find(".swiper-button-prev")[0],breakpoints:{1024:{slidesPerView:3},768:{slidesPerView:1,loop:!0,autoplayDisableOnInteraction:!1}}})},c=function(){i.destroy(!0,!0)},d=function(){e[0].obj=t,r(),o.width()<1024&&(s||(u(),s=!0))};d()}}();
//# sourceMappingURL=data:application/json;base64,
