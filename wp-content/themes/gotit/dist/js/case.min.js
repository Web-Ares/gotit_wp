"use strict";!function(){$(function(){new e($(".preloader")),$.each($(".site__index-page"),function(){new t($(this))}),$.each($("body"),function(){new n($(this))}),$.each($(".site__header"),function(){new i($(this))}),$.each($(".main-slider"),function(){new o($(this)),new l($(this))}),$.each($(".expertise__items"),function(){new s($(this))}),$.each($(".reviews"),function(){new r($(this))}),$.each($(".contacts__map"),function(){new d($(this))}),$.each($(".case .main-slider__btn-down"),function(){new a($(this))})});var e=function(e){var t=this,n=$(window),i=e,o=$("body"),s=function(){n.on({load:function(){r()}})},a=function(){o[0].preloader=t,s()},r=function(){i.addClass("preloader_loaded"),setTimeout(function(){i.remove(),$(".site").addClass("site__loaded")},500)};a()},t=function(e){var t=this,n=e,i=$(window),o=$("html, body"),s=!1,a=(n.find(".slide__content"),$(".main-slider")),r=a.find(".main-slider__btn-down"),d=function(){i.on({load:function(){i.width()>=1024&&(s||(l(),f(),s=!0))},resize:function(){i.width()>=1024?(s||(l(),s=!0),f()):s&&(c(),s=!1)}}),r.on({click:function(){return i.width()>=1024?$(this).parents(".case").length?(o.stop(!0,!1),o.animate({scrollTop:a.innerHeight()},300)):$.fn.fullpage.moveTo(2):(o.stop(!0,!1),o.animate({scrollTop:a.innerHeight()},300)),!1}})},l=function(){$("#fullpage").fullpage({scrollOverflow:!0,sectionSelector:".slide__content",onLeave:function(e,t,n,i,o){t>1?($(".logo_index").hide(),$(".move").addClass("moves_up animated_moves")):($(".logo_index").show(),setTimeout(function(){$(".move").removeClass("moves_up")},300),setTimeout(function(){$(".move").removeClass("animated_moves")},800));var s=$(".slide__content").eq(t-1).find(".slide__content-inner>div>div");s.hasClass("reviews")&&s.find(".reviews__item").addClass("animation")}})},c=function(){$.fn.fullpage.destroy("all")},f=function(){},h=function(){n[0].obj=t,d()};h()},n=function(e){var t=this,n=e,i=$(window),o=$(".main-slider"),s=$(".case__hero"),a=$("body"),r=function(){i.on({resize:function(){i.width()>=768?l():(a.css({"font-size":"75px"}),o.css({"font-size":"75px"}),s.css({"font-size":"75px"}))}})},d=function(){r(),i.width()>=768&&l(),n[0].obj=t},l=function(){var e;e=i.height()>500?100*(window.innerHeight/900)+"px":100*(500/900)+"px",a.css({"font-size":e}),o.css({"font-size":e}),s.css({"font-size":e})};d()},i=function(e){var t=this,n=e,i=$(window),o=n.find(".site__header__btn"),s=n.find(".site__header-menu"),a=$("html"),r=$("body"),d=function(){n.removeClass("opened"),i.width()<1024&&(a.css({"overflow-y":"auto"}),r.css({"overflow-y":"auto"})),s.attr("style","")},l=function(){i.on({scroll:function(){i.scrollTop()>0?n.addClass("fixed"):n.removeClass("fixed")},resize:function(){i.width()>=1024?f():$(".site__content").attr("style","")}}),o.on({click:function(){return n.hasClass("opened")?d():c(),!1}})},c=function(){n.addClass("opened"),i.width()<1024&&(a.css({"overflow-y":"hidden"}),r.css({"overflow-y":"hidden"}))},f=function(){n.find(".site__header-title").length&&$(".site__content").css({"padding-top":$(".site__header-title").outerHeight(!0)})},h=function(){l(),n[0].obj=t,i.scrollTop()>n.innerHeight()/2?n.addClass("fixed"):n.removeClass("fixed"),i.width()>=1024&&f()};h()},o=function(e){var t,n=this,i=e,o=$(window),s=$(".site__header"),a=15,r=10,d=5,l=20,c=25,f=0,h=function(){$(document).on("mousemove",".main-slider .swiper-slide",function(e){e=e||window.event;var t=$(this),n=t.find(".move1:not(.not_move)"),f=t.find(".move2:not(.not_move)"),h=t.find(".move3:not(.not_move)"),p=t.find(".move4:not(.not_move)"),w=t.find(".move5:not(.not_move)");if(o.width()>1024&&!s.hasClass("opened")&&!$(document).find(".move").hasClass("animated_moves")){var _=e.clientX,g=e.clientY,v=i.width()/2,y=i.height()/2,C=(_-v)/v,b=(g-y)/y;o.outerWidth()>1024&&(u(C,b,a,n),u(C,b,a,$(document).find(".copy_1")),m(C,b,r,f),m(C,b,r,$(document).find(".copy_2")),m(C,b,d,h),m(C,b,d,$(document).find(".copy_3")),u(C,b,l,p),u(C,b,l,$(document).find(".copy_4")),u(C,b,c,w),u(C,b,c,$(document).find(".copy_5")))}}),o.on({load:function(){p(),f=o.width()},resize:function(){if(f!=o.width()&&(f=o.width()+1,o.width()<1024&&w()),o.width()>=1024&&screen.width>=1024&&i.css({height:""}),i.hasClass("main-slider_index")){var e=i.parents(".slide__content").next().find(".slide__content-inner"),t=i.find(".swiper-slide-active").innerHeight();setTimeout(function(){i.find(".swiper-slide-active .move").each(function(){var n=$(this),i=n.position().top,o=n.height();if(i+o>t){var s=n.attr("class").replace(/(^.+\D)(\d+)(\D.+$)/i,"$2"),a=0;if($(".copy_move.copy_"+s).length){var r=$(".copy_move.copy_"+s);$(".slide__content").innerHeight()<$(".main-slider").innerHeight()&&(a=$(".main-slider").innerHeight()-$(".slide__content").innerHeight()),r.offset({top:n.offset().top-a,left:n.offset().left}),r.css({bottom:"auto",right:"auto",width:n.width(),height:n.height()})}else{var d=n.clone(!0);d.addClass("copy_move copy_"+s),e.prepend(d),$(".slide__content").innerHeight()<$(".main-slider").innerHeight()&&(a=$(".main-slider").innerHeight()-$(".slide__content").innerHeight()),d.offset({top:n.offset().top-a,left:n.offset().left}),d.css({bottom:"auto",right:"auto",width:n.width(),height:n.height()})}}else{var s=n.attr("class").replace(/(^.+\D)(\d+)(\D.+$)/i,"$2");$(".copy_move.copy_"+s).remove()}})},1500)}}}),window.addEventListener("orientationchange",function(){setTimeout(function(){screen.width<1024&&w()},500)},!1)},p=function(){t=new Swiper(i.find(".swiper-container"),{spaceBetween:0,slidesPerView:1,speed:700,loop:!0,effect:"fade",fade:{crossFade:!0},autoplayDisableOnInteraction:!1,nextButton:i.find(".swiper-button-next")[0],prevButton:i.find(".swiper-button-prev")[0],onInit:function(e){var t=e.slides.filter(".swiper-slide-active"),n=t.parents(".slide__content").index(),o=$(".slide__content").eq(n+1);if(i.hasClass("main-slider_index")){var s=t.innerHeight();t.find(".move").each(function(){var e=$(this),t=e.position().top,n=e.height();if(t+n>s){var i=e.attr("class").replace(/(^.+\D)(\d+)(\D.+$)/i,"$2"),a=0,r=e.clone(!0);r.addClass("copy_move copy_"+i),o.prepend(r),$(".slide__content").innerHeight()<$(".main-slider").innerHeight()&&(a=$(".main-slider").innerHeight()-$(".slide__content").innerHeight()),r.offset({top:e.offset().top-a,left:e.offset().left}),r.css({bottom:"auto",right:"auto",width:e.width(),height:e.height()})}})}},onSlideChangeStart:function(e){var t=e.slides.filter(".swiper-slide-active"),n=t.parents(".slide__content").index();$(".slide__content").eq(n+1).find(".slide__content-inner");$(".copy_move").remove(),t.find(".main-slider__content_pure").length?(i.find(".swiper-button-prev").addClass("colored_pure"),i.find(".swiper-button-next").addClass("colored_pure")):(i.find(".swiper-button-prev").removeClass("colored_pure"),i.find(".swiper-button-next").removeClass("colored_pure"))},onSlideChangeEnd:function(e){var t=e.slides.filter(".swiper-slide-active"),n=t.parents(".slide__content").index(),o=$(".slide__content").eq(n+1).find(".slide__content-inner");if(i.hasClass("main-slider_index")){var s=t.innerHeight();t.find(".move").each(function(){var e=$(this),t=e.position().top,n=e.height();if(t+n>s){var i=e.attr("class").replace(/(^.+\D)(\d+)(\D.+$)/i,"$2"),a=0,r=e.clone(!0);r.addClass("copy_move copy_"+i),o.prepend(r),$(".slide__content").innerHeight()<$(".main-slider").innerHeight()&&(a=$(".main-slider").innerHeight()-$(".slide__content").innerHeight()),r.offset({top:e.offset().top-a,left:e.offset().left}),r.css({bottom:"auto",right:"auto",width:e.width(),height:e.height()})}})}}})},u=function(e,t,n,i){i.css({"-webkit-transform":"translate( "+-(e*n)+"px,"+-(t*n)+"px )",transform:"translate( "+-(e*n)+"px, "+-(t*n)+"px  )"})},m=function(e,t,n,i){i.css({"-webkit-transform":"translate( "+e*n+"px ,"+t*n+"px  )",transform:"translate( "+e*n+"px , "+t*n+"px  )"})},w=function(){var e=o.height();i.parents(".case").length?i.css({height:e+e/5}):i.css({height:e})},_=function(){i[0].obj=n,h(),o.width()<1024&&w()};_()},s=function(e){var t,n=this,i=e,o=$(window),s=!1,a=null,r=function(){o.on({resize:function(){o.width()<a?s||(d(),s=!0):s&&(l(),s=!1)}})},d=function(){t=new Swiper(i.find(".swiper-container"),{slidesPerView:1.9,centeredSlides:!0,onClick:function(e,n){console.log("onClick");var i=e.clickedIndex;e.activeIndex=i,e.updateClasses(),t.slideTo(i,200,!1)}})},l=function(){t.destroy(!0,!0)},c=function(){a=i.parents(".expertise_3").length?1024:768},f=function(){i[0].obj=n,c(),r(),o.width()<a&&(s||(d(),s=!0))};f()},a=function(e){var t=this,n=e,i=$("html, body"),o=$(".main-slider__inner-pic"),s=function(){n.on({click:function(){return i.animate({scrollTop:o.innerHeight()},300),!1}})},a=function(){n[0].obj=t,s()};a()},r=function(e){var t,n=this,i=e,o=$(window),s=function(){o.on({resize:function(){}})},a=function(){t=new Swiper(i.find(".swiper-container"),{slidesPerView:1,spaceBetween:30,speed:500,loop:!0,effect:"fade",fade:{crossFade:!0},autoplayDisableOnInteraction:!1,nextButton:i.find(".swiper-button-next")[0],prevButton:i.find(".swiper-button-prev")[0]})},r=function(){i[0].obj=n,s(),a()};r()},d=function(e){var t,n,i=e,o=i.find("#contact-google-map"),s=o.data("map-lat"),a=o.data("map-lng"),r=o.data("map-zoom"),d=$(".contacts__cities .btn"),l=$(window),c=function(){l.on({load:function(){u()},resize:function(){u()}}),google.maps.event.addDomListener(window,"resize",function(){if(d.length){var e={lat:d.filter(".active").data("map-lat"),lng:d.filter(".active").data("map-lng")};t.setCenter(e),f(t.getCenter(),0,50)}}),d.on({click:function(){var e=$(this);if(!e.hasClass("active")){d.removeClass("active"),e.addClass("active");var i={lat:$(this).data("map-lat"),lng:$(this).data("map-lng")};n.setPosition(i),setTimeout(function(){google.maps.event.trigger(t,"resize"),t.setCenter(i),f(t.getCenter(),0,50)},300)}return!1}})},f=function(e,n,i){var o=Math.pow(2,t.getZoom()),s=t.getProjection().fromLatLngToPoint(e),a=new google.maps.Point(n/o||0,i/o||0),r=new google.maps.Point(s.x-a.x,s.y+a.y),d=t.getProjection().fromPointToLatLng(r);t.setCenter(d)},h=function(){var e=new google.maps.StyledMapType([{stylers:[{hue:"#b00040"},{saturation:60},{lightness:-40}]},{elementType:"labels.text.fill",stylers:[{color:"#ff6fa4"}]},{featureType:"water",stylers:[{color:"#B61530"}]},{featureType:"road",stylers:[{color:"#B61530"},{}]},{featureType:"road.local",stylers:[{color:"#B61530"},{lightness:6}]},{featureType:"road.highway",stylers:[{color:"#B61530"},{lightness:-25}]},{featureType:"road.arterial",stylers:[{color:"#B61530"},{lightness:-10}]},{featureType:"transit",stylers:[{color:"#B61530"},{lightness:70}]},{featureType:"transit.line",stylers:[{color:"#B61530"},{lightness:90}]},{featureType:"administrative.country",elementType:"labels",stylers:[{visibility:"off"}]},{featureType:"transit.station",elementType:"labels.text.stroke",stylers:[{visibility:"off"}]},{featureType:"transit.station",elementType:"labels.text.fill",stylers:[{color:"#ff6fa4"}]}],{name:"Custom Style"}),i="custom_style";t=new google.maps.Map(o[0],{zoom:r,zoomControl:!1,mapTypeControl:!1,scaleControl:!1,streetViewControl:!1,rotateControl:!1,center:{lat:s,lng:a},mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,i]}}),n=new google.maps.Marker({position:{lat:s,lng:a},map:t}),t.mapTypes.set(i,e),t.setMapTypeId(i),google.maps.event.addListenerOnce(t,"idle",function(){if(d.length){var e={lat:d.filter(".active").data("map-lat"),lng:d.filter(".active").data("map-lng")};t.setCenter(e),f(t.getCenter(),0,50)}})},p=function(){google.maps.event.addDomListener(window,"load",h),c(),u()},u=function(){var e=$(".contacts__inner"),t=$(".contacts__info");l.width()>=768?e.width()>t.innerHeight()?(i.height(e.width()),i.width(e.width())):t.innerHeight()>t.innerWidth()?(i.height(t.innerHeight()+.6*t.innerHeight()),i.width(t.innerHeight()+.6*t.innerHeight())):(i.height(t.innerWidth()+.6*t.innerWidth()),i.width(t.innerWidth()+.6*t.innerWidth())):i.attr("style","")};p()},l=function(e){var t=e,n=t.find(".swiper-slide"),i=$(window),o=function(){i.on({load:function(){},resize:function(){s()}})},s=function(){n.find(".move").each(function(){var e=$(this),t=e.data("views");if(void 0!=t){for(var n=0;n<t.length;n++){var o;i.width()>=1024?o=t[2]:i.width()<1024&&i.width()>=768?o=t[1]:i.width()<768&&(o=t[0])}o.url.length&&e.css({"background-image":'url("'+o.url+'")',top:"auto",right:"auto",bottom:"auto",left:"auto"});for(var s in o.positions)e.css(s,o.positions[s]/100+"em")}})},a=function(){o(),s()};a()}}();
"use strict";!function(){$(function(){$.each($(".case__hero-btn-down"),function(){new n($(this))}),$.each($(".case__hero"),function(){new t($(this))}),$.each($(".featured-products__items"),function(){new i($(this)),new o($(this))})});var t=function(t){var n=this,i=t,o=$(window),e=$(".site__header"),s=15,a=10,r=5,c=20,d=25,f=0,h=function(){i.on({mousemove:function(t){t=t||window.event;var n=$(this),f=n.find(".move1:not(.not_move)"),h=n.find(".move2:not(.not_move)"),l=n.find(".move3:not(.not_move)"),p=n.find(".move4:not(.not_move)"),m=n.find(".move5:not(.not_move)");if(o.width()>1024&&!e.hasClass("opened")&&!$(document).find(".move").hasClass("animated_moves")){var v=t.clientX,x=t.clientY,_=i.width()/2,g=i.height()/2,b=(v-_)/_,k=(x-g)/g;o.outerWidth()>1024&&(u(b,k,s,f),u(b,k,s,$(document).find(".copy_1")),w(b,k,a,h),w(b,k,a,$(document).find(".copy_2")),w(b,k,r,l),w(b,k,r,$(document).find(".copy_3")),u(b,k,c,p),u(b,k,c,$(document).find(".copy_4")),u(b,k,d,m),u(b,k,d,$(document).find(".copy_5")))}}}),o.on({load:function(){f=o.width()},resize:function(){f!=o.width()&&(f=o.width()+1,o.width()<1024&&l()),o.width()>=1024&&screen.width>=1024&&(i.css({height:""}),i.parents(".case").css({"padding-top":""})),p()},scroll:function(){}}),window.addEventListener("orientationchange",function(){setTimeout(function(){screen.width<1024&&l()},500)},!1)},u=function(t,n,i,o){o.css({"-webkit-transform":"translate( "+-(t*i)+"px,"+-(n*i)+"px )",transform:"translate( "+-(t*i)+"px, "+-(n*i)+"px  )"})},w=function(t,n,i,o){o.css({"-webkit-transform":"translate( "+t*i+"px ,"+n*i+"px  )",transform:"translate( "+t*i+"px , "+n*i+"px  )"})},l=function(){var t=o.height();i.css({height:t}),i.parents(".case").css({"padding-top":t+20})},p=function(){i.find(".move").each(function(){var t=$(this),n=t.data("views");if(void 0!=n){for(var i=0;i<n.length;i++){var e;o.width()>=1024?e=n[2]:o.width()<1024&&o.width()>=768?e=n[1]:o.width()<768&&(e=n[0])}e.url.length&&t.css({"background-image":'url("'+e.url+'")',top:"auto",right:"auto",bottom:"auto",left:"auto"});for(var s in e.positions)t.css(s,e.positions[s]/100+"em")}})},m=function(){i[0].obj=n,h(),p(),o.width()<1024&&l()};m()},n=function(t){var n=this,i=t,o=$("html, body"),e=$(".case__hero"),s=function(){i.on({click:function(){return o.animate({scrollTop:e.innerHeight()},300),!1}})},a=function(){i[0].obj=n,s()};a()},i=function(t){var n,i=this,o=t,e=$(window),s=!1,a=$(".featured-products"),r=$(".featured-products__disk"),c=function(){e.on({load:function(){e.width()>=768&&h()},resize:function(){e.width()<1024?s||(d(),s=!0):(s&&(f(),s=!1),h()),e.width()<768?r.attr("style",""):h()}})},d=function(){n=new Swiper(o.find(".swiper-container"),{slidesPerView:1,nextButton:o.find(".swiper-button-next")[0],prevButton:o.find(".swiper-button-prev")[0]})},f=function(){n.destroy(!0,!0)},h=function(){var t,n=a.innerHeight(),i=a.innerWidth();t=n>i?i:n,r.width(t),r.height(t),r.css({"margin-top":"-"+t/2+"px","margin-left":"-"+t/2+"px"})},u=function(){o[0].obj=i,c(),e.width()<1024&&(s||(d(),s=!0))};u()},o=function(t){var n=this,i=t,o=i.find(".swiper-slide"),e=$(window),s=e.width(),a=function(){e.on({resize:function(){s!=e.width()&&(s=e.width()+1,e.width()<1024&&o.css({"-weblit-transform":"none",transform:"none"}))},load:function(){e.width()>=1024&&r()},scroll:function(){e.width()>=1024&&r()}})},r=function(){var t,n=e.height(),o=i.offset().top,s=o-n/2.5,a=o-n/15,r=(a-e.scrollTop())/(a-s);r>1?t=0:r<0&&(t=1),r<1&&r>0&&(t=1-r),c(s,a,t)},c=function(t,n,s){var a=n-t,r=i.height()/2;o.each(function(){var n,i,o=$(this),c=o.data("start"),d=o.data("finish"),f=0,h=1,u=(d-c)*s+c,w=f+(h-f)/a*(e.scrollTop()-t);1==s?(n=Math.cos(d/57.2)*r,i=Math.sin(d/57.2)*r,d<90&&d>270&&(n=-n),void 0===c&&(n=0,i=0),o.css({"-webkit-transform":"translateX("+n+"px) translateY("+i+"px) scale( "+h+" )",transform:"translateX("+n+"px) translateY("+i+"px) scale( "+h+" )"})):0==s?(n=Math.cos((d-c)/57.2)*r,i=Math.sin((d-c)/57.2)*r,c<=180&&(i=-i),d<=180&&(n=-n),void 0===c&&(n=0,i=0),o.css({"-webkit-transform":"translateX("+n+"px) translateY("+i+"px) scale( "+f+" )",transform:"translateX("+n+"px) translateY("+i+"px) scale( "+f+" )"})):(n=Math.cos((d-u)/57.2)*r,i=Math.sin((d-u)/57.2)*r,c<=180&&(i=-i),d<=180&&(n=-n),void 0===c&&(n=0,i=0),o.css({"-webkit-transform":"translateX("+n+"px) translateY("+i+"px) scale( "+w+" )",transform:"translateX("+n+"px) translateY("+i+"px) scale( "+w+" )"}))})},d=function(){i[0].obj=n,a()};d()}}();
!function(){$(function(){$(".phone").each(function(){new t($(this))})});var t=function(t){var n=this,a=t,o=a.find(".phone__elem"),s=$(window),r=function(){s.on({scroll:function(){s.width()>=768&&c()}})},c=function(){var t,n=s.height(),o=a.offset().top,r=o-n/2.5,c=o-n/15;s.scrollTop()<r?t=0:s.scrollTop()>c&&(t=1),s.scrollTop()>r&&!(s.scrollTop()>c)&&(t="animation"),l(r,c,t)},l=function(t,n,a){var r=n-t;o.each(function(){var n=$(this),o=0,c=1,l=n.data("translate"),e=n.data("scale"),i=(l-o)/r*(s.scrollTop()-t),f=c+(e-c)/r*(s.scrollTop()-t);0==a?n.css({"-webkit-transform":"translateY("+o+"%) scale( "+c+" )",transform:"translateY("+o+"%) scale( "+c+" )"}):1==a?n.css({"-webkit-transform":"translateY("+l+"%) scale( "+e+" )",transform:"translateY("+l+"%) scale( "+e+" )"}):n.css({"-webkit-transform":"translateY("+i+"%) scale( "+f+" )",transform:"translateY("+i+"%) scale( "+f+" )"})})},e=function(){a[0].obj=n,c(),r()};e()}}();
"use strict";!function(){$(function(){$.each($(".bubbles"),function(){new i($(this))})});var i=function(i){var n,t=this,a=i,h=$(window),c=function(){h.on({resize:function(){n=h.height(),a.height(n)}})},e=function(){for(var i=30,n=0;n<=i;n++){var t=Math.ceil(50*Math.random()),h=Math.ceil(50*Math.random()),c=Math.ceil(10*Math.random()),e=Math.ceil(5*Math.random()),o=Math.ceil(5*Math.random());a.append('<div class="bubble moving'+t+" pos"+h+'"><div class="scale'+c+'"><div class="shake'+o+'"><span class="item stretch'+e+'"></span></div></div>')}},o=function(){n=h.height(),a.height(n)},s=function(){a[0].obj=t,c(),e(),o()};s()}}();
!function(){$(function(){$(".case__inner img").each(function(){new t($(this))})});var t=function(t){var n=this,i=t,a=function(){var t=i.attr("width"),n=i.attr("height");i.attr("width",t/2),i.attr("height",n/2)},h=function(){i[0].obj=n,a()};h()}}();
//# sourceMappingURL=data:application/json;base64,
