"use strict";!function(){$(function(){new e($(".preloader")),$.each($(".site__index-page"),function(){new t($(this))}),$.each($("body"),function(){new n($(this))}),$.each($(".site__header"),function(){new i($(this))}),$.each($(".main-slider"),function(){new o($(this)),new l($(this))}),$.each($(".expertise__items"),function(){new s($(this))}),$.each($(".reviews"),function(){new r($(this))}),$.each($(".contacts__map"),function(){new d($(this))}),$.each($(".case .main-slider__btn-down"),function(){new a($(this))})});var e=function(e){var t=this,n=$(window),i=e,o=$("body"),s=function(){n.on({load:function(){r()}})},a=function(){o[0].preloader=t,s()},r=function(){i.addClass("preloader_loaded"),setTimeout(function(){i.remove(),$(".site").addClass("site__loaded")},500)};a()},t=function(e){var t=this,n=e,i=$(window),o=$("html, body"),s=!1,a=(n.find(".slide__content"),$(".main-slider")),r=a.find(".main-slider__btn-down"),d=function(){i.on({load:function(){i.width()>=1024&&(s||(l(),f(),s=!0))},resize:function(){i.width()>=1024?(s||(l(),s=!0),f()):s&&(c(),s=!1)}}),r.on({click:function(){return i.width()>=1024?$(this).parents(".case").length?(o.stop(!0,!1),o.animate({scrollTop:a.innerHeight()},300)):$.fn.fullpage.moveTo(2):(o.stop(!0,!1),o.animate({scrollTop:a.innerHeight()},300)),!1}})},l=function(){$("#fullpage").fullpage({scrollOverflow:!0,sectionSelector:".slide__content",onLeave:function(e,t,n,i,o){t>1?($(".logo_index").hide(),$(".move").addClass("moves_up animated_moves")):($(".logo_index").show(),setTimeout(function(){$(".move").removeClass("moves_up")},300),setTimeout(function(){$(".move").removeClass("animated_moves")},800));var s=$(".slide__content").eq(t-1).find(".slide__content-inner>div>div");s.hasClass("reviews")&&s.find(".reviews__item").addClass("animation")}})},c=function(){$.fn.fullpage.destroy("all")},f=function(){},h=function(){n[0].obj=t,d()};h()},n=function(e){var t=this,n=e,i=$(window),o=$(".main-slider"),s=$(".case__hero"),a=n,r=function(){i.on({resize:function(){i.width()>=768?l():(a.css({"font-size":"75px"}),o.css({"font-size":"75px"}),s.css({"font-size":"75px"}))}})},d=function(){r(),i.width()>=768&&l(),n[0].obj=t},l=function(){var e;e=i.height()>500?100*(window.innerHeight/800)+"px":"62.5px",a.css({"font-size":e}),o.css({"font-size":e}),s.css({"font-size":e})};d()},i=function(e){var t=this,n=e,i=$(window),o=n.find(".site__header__btn"),s=n.find(".site__header-menu"),a=$("html"),r=$("body"),d=function(){n.removeClass("opened"),i.width()<1024&&(a.css({"overflow-y":"auto"}),r.css({"overflow-y":"auto"})),s.attr("style","")},l=function(){i.on({scroll:function(){i.scrollTop()>0?n.addClass("fixed"):n.removeClass("fixed")},resize:function(){i.width()>=1024?f():$(".site__content").attr("style","")}}),o.on({click:function(){return n.hasClass("opened")?d():c(),!1}})},c=function(){n.addClass("opened"),i.width()<1024&&(a.css({"overflow-y":"hidden"}),r.css({"overflow-y":"hidden"}))},f=function(){n.find(".site__header-title").length&&$(".site__content").css({"padding-top":$(".site__header-title").outerHeight(!0)})},h=function(){l(),n[0].obj=t,i.scrollTop()>n.innerHeight()/2?n.addClass("fixed"):n.removeClass("fixed"),i.width()>=1024&&f()};h()},o=function(e){var t,n=this,i=e,o=$(window),s=$(".site__header"),a=15,r=10,d=5,l=20,c=25,f=0,h=function(){$(document).on("mousemove",".main-slider .swiper-slide",function(e){e=e||window.event;var t=$(this),n=t.find(".move1:not(.not_move)"),f=t.find(".move2:not(.not_move)"),h=t.find(".move3:not(.not_move)"),p=t.find(".move4:not(.not_move)"),_=t.find(".move5:not(.not_move)");if(o.width()>1024&&!s.hasClass("opened")&&!$(document).find(".move").hasClass("animated_moves")){var w=e.clientX,v=e.clientY,g=i.width()/2,y=i.height()/2,C=(w-g)/g,b=(v-y)/y;o.outerWidth()>1024&&(u(C,b,a,n),u(C,b,a,$(document).find(".copy_1")),m(C,b,r,f),m(C,b,r,$(document).find(".copy_2")),m(C,b,d,h),m(C,b,d,$(document).find(".copy_3")),u(C,b,l,p),u(C,b,l,$(document).find(".copy_4")),u(C,b,c,_),u(C,b,c,$(document).find(".copy_5")))}}),o.on({load:function(){p(),f=o.width()},resize:function(){if(f!=o.width()&&(f=o.width()+1,o.width()<1024&&_()),o.width()>=1024&&screen.width>=1024&&i.css({height:""}),i.hasClass("main-slider_index")){var e=i.parents(".slide__content").next().find(".slide__content-inner"),t=i.find(".swiper-slide-active").innerHeight();setTimeout(function(){i.find(".swiper-slide-active .move").each(function(){var n=$(this),i=n.position().top,o=n.height();if(i+o>t){var s=n.attr("class").replace(/(^.+\D)(\d+)(\D.+$)/i,"$2"),a=0;if($(".copy_move.copy_"+s).length){var r=$(".copy_move.copy_"+s);$(".slide__content").innerHeight()<$(".main-slider").innerHeight()&&(a=$(".main-slider").innerHeight()-$(".slide__content").innerHeight()),r.offset({top:n.offset().top-a,left:n.offset().left}),r.css({bottom:"auto",right:"auto",width:n.width(),height:n.height()})}else{var d=n.clone(!0);d.addClass("copy_move copy_"+s),e.prepend(d),$(".slide__content").innerHeight()<$(".main-slider").innerHeight()&&(a=$(".main-slider").innerHeight()-$(".slide__content").innerHeight()),d.offset({top:n.offset().top-a,left:n.offset().left}),d.css({bottom:"auto",right:"auto",width:n.width(),height:n.height()})}}else{var s=n.attr("class").replace(/(^.+\D)(\d+)(\D.+$)/i,"$2");$(".copy_move.copy_"+s).remove()}})},1500)}}}),window.addEventListener("orientationchange",function(){setTimeout(function(){screen.width<1024&&_()},500)},!1)},p=function(){t=new Swiper(i.find(".swiper-container"),{spaceBetween:0,slidesPerView:1,speed:700,loop:!0,effect:"fade",fade:{crossFade:!0},autoplayDisableOnInteraction:!1,nextButton:i.find(".swiper-button-next")[0],prevButton:i.find(".swiper-button-prev")[0],onInit:function(e){var t=e.slides.filter(".swiper-slide-active"),n=t.parents(".slide__content").index(),o=$(".slide__content").eq(n+1);if(i.hasClass("main-slider_index")){var s=t.innerHeight();t.find(".move").each(function(){var e=$(this),t=e.position().top,n=e.height();if(t+n>s){var i=e.attr("class").replace(/(^.+\D)(\d+)(\D.+$)/i,"$2"),a=0,r=e.clone(!0);r.addClass("copy_move copy_"+i),o.prepend(r),$(".slide__content").innerHeight()<$(".main-slider").innerHeight()&&(a=$(".main-slider").innerHeight()-$(".slide__content").innerHeight()),r.offset({top:e.offset().top-a,left:e.offset().left}),r.css({bottom:"auto",right:"auto",width:e.width(),height:e.height()})}})}},onSlideChangeStart:function(e){var t=e.slides.filter(".swiper-slide-active"),n=t.parents(".slide__content").index();$(".slide__content").eq(n+1).find(".slide__content-inner");$(".copy_move").remove(),t.find(".main-slider__content_pure").length?(i.find(".swiper-button-prev").addClass("colored_pure"),i.find(".swiper-button-next").addClass("colored_pure")):(i.find(".swiper-button-prev").removeClass("colored_pure"),i.find(".swiper-button-next").removeClass("colored_pure"))},onSlideChangeEnd:function(e){var t=e.slides.filter(".swiper-slide-active"),n=t.parents(".slide__content").index(),o=$(".slide__content").eq(n+1).find(".slide__content-inner");if(i.hasClass("main-slider_index")){var s=t.innerHeight();t.find(".move").each(function(){var e=$(this),t=e.position().top,n=e.height();if(t+n>s){var i=e.attr("class").replace(/(^.+\D)(\d+)(\D.+$)/i,"$2"),a=0,r=e.clone(!0);r.addClass("copy_move copy_"+i),o.prepend(r),$(".slide__content").innerHeight()<$(".main-slider").innerHeight()&&(a=$(".main-slider").innerHeight()-$(".slide__content").innerHeight()),r.offset({top:e.offset().top-a,left:e.offset().left}),r.css({bottom:"auto",right:"auto",width:e.width(),height:e.height()})}})}}})},u=function(e,t,n,i){i.css({"-webkit-transform":"translate( "+-(e*n)+"px,"+-(t*n)+"px )",transform:"translate( "+-(e*n)+"px, "+-(t*n)+"px  )"})},m=function(e,t,n,i){i.css({"-webkit-transform":"translate( "+e*n+"px ,"+t*n+"px  )",transform:"translate( "+e*n+"px , "+t*n+"px  )"})},_=function(){var e=o.height();i.parents(".case").length?i.css({height:e+e/5}):i.css({height:e})},w=function(){i[0].obj=n,h(),o.width()<1024&&_()};w()},s=function(e){var t,n=this,i=e,o=$(window),s=!1,a=null,r=function(){o.on({resize:function(){o.width()<a?s||(d(),s=!0):s&&(l(),s=!1)}})},d=function(){t=new Swiper(i.find(".swiper-container"),{slidesPerView:1.9,centeredSlides:!0,onClick:function(e,n){console.log("onClick");var i=e.clickedIndex;e.activeIndex=i,e.updateClasses(),t.slideTo(i,200,!1)}})},l=function(){t.destroy(!0,!0)},c=function(){a=i.parents(".expertise_3").length?1024:768},f=function(){i[0].obj=n,c(),r(),o.width()<a&&(s||(d(),s=!0))};f()},a=function(e){var t=this,n=e,i=$("html, body"),o=$(".main-slider__inner-pic"),s=function(){n.on({click:function(){return i.animate({scrollTop:o.innerHeight()},300),!1}})},a=function(){n[0].obj=t,s()};a()},r=function(e){var t,n=this,i=e,o=$(window),s=function(){o.on({resize:function(){}})},a=function(){t=new Swiper(i.find(".swiper-container"),{slidesPerView:1,spaceBetween:30,speed:500,loop:!0,effect:"fade",fade:{crossFade:!0},autoplayDisableOnInteraction:!1,nextButton:i.find(".swiper-button-next")[0],prevButton:i.find(".swiper-button-prev")[0]})},r=function(){i[0].obj=n,s(),a()};r()},d=function(e){var t,n,i=e,o=i.find("#contact-google-map"),s=o.data("map-lat"),a=o.data("map-lng"),r=o.data("map-zoom"),d=$(".contacts__cities .btn"),l=$(window),c=function(){l.on({load:function(){p()},resize:function(){p()}}),google.maps.event.addDomListener(window,"resize",function(){if(d.length){var e={lat:d.filter(".active").data("map-lat"),lng:d.filter(".active").data("map-lng")};t.setCenter(e)}}),d.on({click:function(){var e=$(this);if(!e.hasClass("active")){d.removeClass("active"),e.addClass("active");var i={lat:$(this).data("map-lat"),lng:$(this).data("map-lng")};n.setPosition(i),setTimeout(function(){t.setCenter(i)},300)}return!1}})},f=function(){var e=new google.maps.StyledMapType([{stylers:[{hue:"#b00040"},{saturation:60},{lightness:-40}]},{elementType:"labels.text.fill",stylers:[{color:"#ff6fa4"}]},{featureType:"water",stylers:[{color:"#B61530"}]},{featureType:"road",stylers:[{color:"#B61530"},{}]},{featureType:"road.local",stylers:[{color:"#B61530"},{lightness:6}]},{featureType:"road.highway",stylers:[{color:"#B61530"},{lightness:-25}]},{featureType:"road.arterial",stylers:[{color:"#B61530"},{lightness:-10}]},{featureType:"transit",stylers:[{color:"#B61530"},{lightness:70}]},{featureType:"transit.line",stylers:[{color:"#B61530"},{lightness:90}]},{featureType:"administrative.country",elementType:"labels",stylers:[{visibility:"off"}]},{featureType:"transit.station",elementType:"labels.text.stroke",stylers:[{visibility:"off"}]},{featureType:"transit.station",elementType:"labels.text.fill",stylers:[{color:"#ff6fa4"}]}],{name:"Custom Style"}),i="custom_style";t=new google.maps.Map(o[0],{zoom:r,zoomControl:!1,mapTypeControl:!1,scaleControl:!1,streetViewControl:!1,rotateControl:!1,center:{lat:s,lng:a},mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,i]}}),n=new google.maps.Marker({position:{lat:s,lng:a},map:t}),t.mapTypes.set(i,e),t.setMapTypeId(i),google.maps.event.addListenerOnce(t,"idle",function(){if(d.length){var e={lat:d.filter(".active").data("map-lat"),lng:d.filter(".active").data("map-lng")};t.setCenter(e)}})},h=function(){google.maps.event.addDomListener(window,"load",f),c(),p()},p=function(){var e=$(".contacts__inner"),t=$(".contacts__info"),n=$(".contacts__pulse");l.width()>=768?e.width()>t.innerHeight()?(i.height(e.width()),i.width(e.width())):t.innerHeight()>t.innerWidth()?(i.height(t.innerHeight()+.6*t.innerHeight()),i.width(t.innerHeight()+.6*t.innerHeight())):(i.height(t.innerWidth()+.6*t.innerWidth()),i.width(t.innerWidth()+.6*t.innerWidth())):i.attr("style","");var s=n.offset().top-i.offset().top,a=n.height()/2+s;o.height(2*a)};h()},l=function(e){var t=e,n=t.find(".swiper-slide"),i=$(window),o=function(){i.on({load:function(){},resize:function(){s()}})},s=function(){n.find(".move").each(function(){var e=$(this),t=e.data("views");if(void 0!=t){for(var n=0;n<t.length;n++){var o;i.width()>=1024?o=t[2]:i.width()<1024&&i.width()>=768?o=t[1]:i.width()<768&&(o=t[0])}o.url.length&&e.css({"background-image":'url("'+o.url+'")',top:"auto",right:"auto",bottom:"auto",left:"auto"});for(var s in o.positions)e.css(s,o.positions[s]/100+"em")}})},a=function(){o(),s()};a()}}();
!function(){$(function(){"use strict";$.each($(".contacts__form"),function(){new n($(this))})});var n=function(n){var e=this,i=n,t=i.find(".gform_body"),r=$(".contacts__success .btn"),o=$(".gform_wrapper"),f=$(".contacts__form"),s=i.find(".gfield_textarea"),d=function(){u(),a(),_(),i[0].obj=e},a=function(){s.append('<div class="contacts__fields-textarea-height"></div>')},c=function(){},_=function(){o=o.clone(!0)},l=function(){i.find(".gform_body").append('<span class="contacts__fields-error"></span>'),i.find(".gfield").hasClass("gfield_error")?(i.find(".gform_body").find(".contacts__fields-error").text(i.find(".gfield_error:first .validation_message").text()),i.find(".gfield_error:first input, .gfield_error:first textarea").focus(),i.find(".gform_body").find(".contacts__fields-error").addClass("visible")):t.find(".contacts__fields-error").removeClass("visible")},u=function(){$(document).bind("gform_confirmation_loaded",function(){i.addClass("hidden"),f.find("div:first").append(o),$(".gform_wrapper").find("form")[0].reset()}),$(document).bind("gform_post_render",function(){c(),l()}),s.on({keyup:function(n){var e=$(this).find("textarea").val(""),i=$(".contacts__fields-textarea-height");return i.html(e),s.css("height",i.innerHeight()),13==n.keyCode&&s.css("height",i.innerHeight()),!1}}),r.on({click:function(){return $(".gform_wrapper").find("form")[0].reset(),_(),i.removeClass("hidden"),!1}})};d()}}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5tYWluLmpzIiwianF1ZXJ5LmNvbnRhY3QtZm9ybS5qcyJdLCJuYW1lcyI6WyIkIiwiUHJlbG9hZGVyIiwiZWFjaCIsIlBhZ2UiLCJ0aGlzIiwiWm9vbVNpdGUiLCJNZW51IiwiTWFpblNsaWRlciIsIk1haW5TbGlkZXJQaWN0dXJlcyIsIkV4cGVydGlzZVNsaWRlciIsIlJldmlld3NTbGlkZXIiLCJMb2NhdGlvbiIsIlNjcm9sbERvd24iLCJvYmoiLCJfc2VsZiIsIl93aW5kb3ciLCJ3aW5kb3ciLCJfcHJlbG9hZGVyIiwiX2JvZHkiLCJfYWRkRXZlbnRzIiwib24iLCJsb2FkIiwiX3Nob3dTaXRlIiwiX2luaXQiLCJwcmVsb2FkZXIiLCJhZGRDbGFzcyIsInNldFRpbWVvdXQiLCJyZW1vdmUiLCJfb2JqIiwiX2RvbSIsIl9zd2lwZXJJbml0IiwiX21haW5TbGlkZXIiLCJmaW5kIiwiX2J0bkRvd24iLCJ3aWR0aCIsIl9pbml0RnVsbFBhZ2UiLCJfY2VudGVyQ29udGVudCIsInJlc2l6ZSIsIl9kZXN0cm95RnVsbFBhZ2UiLCJjbGljayIsInBhcmVudHMiLCJsZW5ndGgiLCJzdG9wIiwiYW5pbWF0ZSIsInNjcm9sbFRvcCIsImlubmVySGVpZ2h0IiwiZm4iLCJmdWxscGFnZSIsIm1vdmVUbyIsInNjcm9sbE92ZXJmbG93Iiwic2VjdGlvblNlbGVjdG9yIiwib25MZWF2ZSIsImFuY2hvckxpbmsiLCJpbmRleCIsInNsaWRlSW5kZXgiLCJkaXJlY3Rpb24iLCJuZXh0U2xpZGVJbmRleCIsImhpZGUiLCJzaG93IiwicmVtb3ZlQ2xhc3MiLCJibG9jayIsImVxIiwiaGFzQ2xhc3MiLCJkZXN0cm95IiwiX2Nhc2VIZXJvIiwiX29uRXZlbnRzIiwiX3NldFNpemUiLCJjc3MiLCJmb250LXNpemUiLCJuZXdTaXplIiwiaGVpZ2h0IiwiX21lbnVCdG4iLCJfbWVudUl0ZW1zIiwiX2h0bWwiLCJfY2xvc2VNZW51Iiwib3ZlcmZsb3cteSIsImF0dHIiLCJzY3JvbGwiLCJfc2V0SGVhZGVySGVpZ2h0IiwiX29wZW5NZW51IiwicGFkZGluZy10b3AiLCJvdXRlckhlaWdodCIsIl9zd2lwZXIxIiwiX2hlYWRlciIsIl9zdGVwMSIsIl9zdGVwMiIsIl9zdGVwMyIsIl9zdGVwNCIsIl9zdGVwNSIsIl9nbG9iYWxXaWR0aCIsImRvY3VtZW50IiwiZSIsImV2ZW50Iiwic2xpZGUiLCJfaW1nMSIsIl9pbWcyIiwiX2ltZzMiLCJfaW1nNCIsIl9pbWc1IiwicGFnZVgiLCJjbGllbnRYIiwicGFnZVkiLCJjbGllbnRZIiwiaGFsZldpZHRoIiwiaGFsZkhlaWdodCIsInBlcmNlbnRGcm9tQ2VudGVyWCIsInBlcmNlbnRGcm9tQ2VudGVyWSIsIm91dGVyV2lkdGgiLCJfbW92ZUJvdHRvbSIsIl9tb3ZlVG9wIiwiX2luaXRTd2lwZXIiLCJfc2V0SGVpZ2h0Iiwic2NyZWVuIiwibmV4dFNlY3Rpb24iLCJuZXh0IiwidmVnZXRhYmxlIiwicG9zIiwicG9zaXRpb24iLCJ0b3AiLCJoZWlnaHRWZWciLCJudW0iLCJyZXBsYWNlIiwiZGlmZiIsIm9sZEltZyIsIm9mZnNldCIsImxlZnQiLCJib3R0b20iLCJyaWdodCIsIm5ld0ltZyIsImNsb25lIiwicHJlcGVuZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJTd2lwZXIiLCJzcGFjZUJldHdlZW4iLCJzbGlkZXNQZXJWaWV3Iiwic3BlZWQiLCJsb29wIiwiZWZmZWN0IiwiZmFkZSIsImNyb3NzRmFkZSIsImF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb24iLCJuZXh0QnV0dG9uIiwicHJldkJ1dHRvbiIsIm9uSW5pdCIsInN3aXBlciIsImFjdFNsaWRlIiwic2xpZGVzIiwiZmlsdGVyIiwic2VjdGlvbkluZGV4Iiwib25TbGlkZUNoYW5nZVN0YXJ0Iiwib25TbGlkZUNoYW5nZUVuZCIsInhQZXJjZW50IiwieVBlcmNlbnQiLCJzdGVwIiwiaW1hZ2UiLCItd2Via2l0LXRyYW5zZm9ybSIsInRyYW5zZm9ybSIsIl9zd2lwZXIiLCJfc2NyZWVuVmFsIiwiX2Rlc3Ryb3lTd2lwZXIiLCJjZW50ZXJlZFNsaWRlcyIsIm9uQ2xpY2siLCJjb25zb2xlIiwibG9nIiwiY2xpY2tlZCIsImNsaWNrZWRJbmRleCIsImFjdGl2ZUluZGV4IiwidXBkYXRlQ2xhc3NlcyIsInNsaWRlVG8iLCJfc2V0U2NyZWVuVmFsdWUiLCJfc2Nyb2xsZXIiLCJfbWFpblNsaWRlclBpYyIsIm1hcCIsIm1hcmtlciIsIl9tYXAiLCJfbWFwTGF0IiwiZGF0YSIsIl9tYXBMbmciLCJfbWFwWm9vbSIsIl9idG4iLCJnb29nbGUiLCJtYXBzIiwiYWRkRG9tTGlzdGVuZXIiLCJteUxhdExuZyIsImxhdCIsImxuZyIsInNldENlbnRlciIsImN1ckl0ZW0iLCJzZXRQb3NpdGlvbiIsIl9pbml0TWFwIiwiY3VzdG9tTWFwVHlwZSIsIlN0eWxlZE1hcFR5cGUiLCJzdHlsZXJzIiwiaHVlIiwic2F0dXJhdGlvbiIsImxpZ2h0bmVzcyIsImVsZW1lbnRUeXBlIiwiY29sb3IiLCJmZWF0dXJlVHlwZSIsInZpc2liaWxpdHkiLCJuYW1lIiwiY3VzdG9tTWFwVHlwZUlkIiwiTWFwIiwiem9vbSIsInpvb21Db250cm9sIiwibWFwVHlwZUNvbnRyb2wiLCJzY2FsZUNvbnRyb2wiLCJzdHJlZXRWaWV3Q29udHJvbCIsInJvdGF0ZUNvbnRyb2wiLCJjZW50ZXIiLCJtYXBUeXBlQ29udHJvbE9wdGlvbnMiLCJtYXBUeXBlSWRzIiwiTWFwVHlwZUlkIiwiUk9BRE1BUCIsIk1hcmtlciIsIm1hcFR5cGVzIiwic2V0Iiwic2V0TWFwVHlwZUlkIiwiYWRkTGlzdGVuZXJPbmNlIiwiY29udGVudElubmVyIiwiY29udGVudEluZm8iLCJwdWxzZSIsImlubmVyV2lkdGgiLCJfc2xpZGUiLCJfYWRkUGljdHVyZXMiLCJkYXRhVmlldyIsInVuZGVmaW5lZCIsImkiLCJuZWVkVmlldyIsInVybCIsImJhY2tncm91bmQtaW1hZ2UiLCJrZXkiLCJwb3NpdGlvbnMiLCJDb250YWN0Rm9ybSIsIl9mb3JtQm9keSIsIl9idG5TdWNjZXNzIiwiX2Zvcm1DbG9uZSIsIl9jb250YWN0Rm9ybSIsIl90ZXh0YXJlYVdyYXAiLCJfY29uc3RydWN0b3IiLCJfcGFzdGVIZWlnaHREaXYiLCJfZ2V0Q0xvbmVGb3JtIiwiYXBwZW5kIiwiX3Bhc3RlRXJyb3JXcmFwIiwiX2FkZEVycm9yVGV4dCIsInRleHQiLCJmb2N1cyIsImJpbmQiLCJyZXNldCIsImtleXVwIiwidmFsdWUiLCJ2YWwiLCJoZWlnaHRXcmFwIiwiaHRtbCIsImtleUNvZGUiXSwibWFwcGluZ3MiOiJBQUFBLGNBQ0EsV0FFSUEsRUFBRyxXQUVDLEdBQUlDLEdBQVdELEVBQUUsZUFFakJBLEVBQUVFLEtBQU1GLEVBQUUscUJBQXVCLFdBRTdCLEdBQUlHLEdBQU1ILEVBQUVJLFNBSWhCSixFQUFFRSxLQUFNRixFQUFFLFFBQVMsV0FFZixHQUFJSyxHQUFVTCxFQUFFSSxTQUlwQkosRUFBRUUsS0FBTUYsRUFBRSxpQkFBa0IsV0FFeEIsR0FBSU0sR0FBTU4sRUFBRUksU0FJaEJKLEVBQUVFLEtBQU1GLEVBQUUsZ0JBQWlCLFdBRXZCLEdBQUlPLEdBQVlQLEVBQUVJLE9BQ2xCLEdBQUlJLEdBQW9CUixFQUFFSSxTQUk5QkosRUFBRUUsS0FBTUYsRUFBRSxxQkFBc0IsV0FFNUIsR0FBSVMsR0FBaUJULEVBQUVJLFNBSTNCSixFQUFFRSxLQUFNRixFQUFFLFlBQWEsV0FFbkIsR0FBSVUsR0FBZVYsRUFBRUksU0FJekJKLEVBQUVFLEtBQU1GLEVBQUUsa0JBQW1CLFdBRXpCLEdBQUlXLEdBQVVYLEVBQUVJLFNBSXBCSixFQUFFRSxLQUFNRixFQUFFLGdDQUFpQyxXQUV2QyxHQUFJWSxHQUFZWixFQUFFSSxVQU8xQixJQUFJSCxHQUFZLFNBQVVZLEdBR3RCLEdBQUlDLEdBQVFWLEtBQ1JXLEVBQVVmLEVBQUdnQixRQUNiQyxFQUFhSixFQUNiSyxFQUFRbEIsRUFBRSxRQUdWbUIsRUFBYSxXQUVUSixFQUFRSyxJQUNKQyxLQUFNLFdBRUZDLFFBTVpDLEVBQVEsV0FFSkwsRUFB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QUNGaEIsRUFBYzNLLElBQUssU0FBVXlMLEVBQVcvTSxnQkFHckMsS0FJZjhMLEVBQVl2TixJQUNSbUIsTUFBTyxXQUtILE1BSkF2QyxHQUFFLGtCQUFrQmdDLEtBQUssUUFBUSxHQUFHd04sUUFDcENQLElBQ0FyTixFQUFLK0IsWUFBWSxXQUVWLEtBUXZCb0wiLCJmaWxlIjoiY29udGFjdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4oIGZ1bmN0aW9uKCkge1xuXG4gICAgJCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgbmV3IFByZWxvYWRlciggJCgnLnByZWxvYWRlcicpICk7XG5cbiAgICAgICAgJC5lYWNoKCAkKCcuc2l0ZV9faW5kZXgtcGFnZScgKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgUGFnZSggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoJ2JvZHknKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgWm9vbVNpdGUoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICAgICAgJC5lYWNoKCAkKCcuc2l0ZV9faGVhZGVyJyksIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IE1lbnUoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICAgICAgJC5lYWNoKCAkKCcubWFpbi1zbGlkZXInKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgTWFpblNsaWRlciggJCh0aGlzKSApO1xuICAgICAgICAgICAgbmV3IE1haW5TbGlkZXJQaWN0dXJlcyggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoJy5leHBlcnRpc2VfX2l0ZW1zJyksIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IEV4cGVydGlzZVNsaWRlciggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoJy5yZXZpZXdzJyksIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IFJldmlld3NTbGlkZXIoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICAgICAgJC5lYWNoKCAkKCcuY29udGFjdHNfX21hcCcpLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBMb2NhdGlvbiggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoJy5jYXNlIC5tYWluLXNsaWRlcl9fYnRuLWRvd24nKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgU2Nyb2xsRG93biggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuXG4gICAgfSApO1xuXG4gICAgdmFyIFByZWxvYWRlciA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyApLFxuICAgICAgICAgICAgX3ByZWxvYWRlciA9IG9iaixcbiAgICAgICAgICAgIF9ib2R5ID0gJCgnYm9keScpO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICBsb2FkOiBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfc2hvd1NpdGUoKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfYm9keVswXS5wcmVsb2FkZXIgPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2hvd1NpdGUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF9wcmVsb2FkZXIuYWRkQ2xhc3MoICdwcmVsb2FkZXJfbG9hZGVkJyApO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBfcHJlbG9hZGVyLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAkKCcuc2l0ZScpLmFkZENsYXNzKCAnc2l0ZV9fbG9hZGVkJyApO1xuXG4gICAgICAgICAgICAgICAgfSw1MDApO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xuXG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIFBhZ2UgPSBmdW5jdGlvbiAoIG9iaiApIHtcblxuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKCB3aW5kb3cgKSxcbiAgICAgICAgICAgIF9kb20gPSAkKCAnaHRtbCwgYm9keScgKSxcbiAgICAgICAgICAgIF9zd2lwZXJJbml0ID0gZmFsc2UsXG4gICAgICAgICAgICBfc3dpcGVyLFxuICAgICAgICAgICAgX3NsaWRlQ29udGVudCA9IF9vYmouZmluZCgnLnNsaWRlX19jb250ZW50JyksXG4gICAgICAgICAgICBfbWFpblNsaWRlciA9ICQoJy5tYWluLXNsaWRlcicpLFxuICAgICAgICAgICAgX2J0bkRvd24gPSBfbWFpblNsaWRlci5maW5kKCcubWFpbi1zbGlkZXJfX2J0bi1kb3duJyk7XG5cbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSAxMDI0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggIV9zd2lwZXJJbml0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pbml0RnVsbFBhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NlbnRlckNvbnRlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3N3aXBlckluaXQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggIV9zd2lwZXJJbml0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pbml0RnVsbFBhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3N3aXBlckluaXQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NlbnRlckNvbnRlbnQoKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9zd2lwZXJJbml0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kZXN0cm95RnVsbFBhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3N3aXBlckluaXQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfYnRuRG93bi5vbigge1xuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJCggdGhpcyApLnBhcmVudHMoICcuY2FzZScgKS5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2RvbS5zdG9wKCB0cnVlLCBmYWxzZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZG9tLmFuaW1hdGUoIHsgc2Nyb2xsVG9wOiBfbWFpblNsaWRlci5pbm5lckhlaWdodCgpIH0sIDMwMCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNle1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZm4uZnVsbHBhZ2UubW92ZVRvKDIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2RvbS5zdG9wKCB0cnVlLCBmYWxzZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kb20uYW5pbWF0ZSggeyBzY3JvbGxUb3A6IF9tYWluU2xpZGVyLmlubmVySGVpZ2h0KCkgfSwgMzAwICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXRGdWxsUGFnZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgJCgnI2Z1bGxwYWdlJykuZnVsbHBhZ2UoIHtcblxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxPdmVyZmxvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvblNlbGVjdG9yOiAnLnNsaWRlX19jb250ZW50JyxcbiAgICAgICAgICAgICAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24oIGFuY2hvckxpbmssIGluZGV4LCBzbGlkZUluZGV4LCBkaXJlY3Rpb24sIG5leHRTbGlkZUluZGV4ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggaW5kZXggPiAxICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmxvZ29faW5kZXgnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLm1vdmUnKS5hZGRDbGFzcygnbW92ZXNfdXAgYW5pbWF0ZWRfbW92ZXMnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5sb2dvX2luZGV4Jykuc2hvdygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5tb3ZlJykucmVtb3ZlQ2xhc3MoJ21vdmVzX3VwJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAzMDAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcubW92ZScpLnJlbW92ZUNsYXNzKCdhbmltYXRlZF9tb3ZlcycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgODAwICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBibG9jayA9ICQoJy5zbGlkZV9fY29udGVudCcpLmVxKCBpbmRleC0xKS5maW5kKCcuc2xpZGVfX2NvbnRlbnQtaW5uZXI+ZGl2PmRpdicpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggYmxvY2suaGFzQ2xhc3MoJ3Jldmlld3MnKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLmZpbmQoJy5yZXZpZXdzX19pdGVtJykuYWRkQ2xhc3MoJ2FuaW1hdGlvbicpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2Rlc3Ryb3lGdWxsUGFnZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgJC5mbi5mdWxscGFnZS5kZXN0cm95KCdhbGwnKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jZW50ZXJDb250ZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy9fc2xpZGVDb250ZW50LmVhY2goIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gICAgdmFyIGN1ckNvbnRlbnQgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgIC8vICAgICAgICBjdXJDb250ZW50SW5uZXIgPSBjdXJDb250ZW50LmZpbmQoJy5zbGlkZV9fY29udGVudC1pbm5lcicpO1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gICAgY3VyQ29udGVudElubmVyLmNzcygge1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAnbWluLWhlaWdodCc6IF93aW5kb3cuaGVpZ2h0KClcbiAgICAgICAgICAgICAgICAvLyAgICB9ICk7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyAgICBpZiggY3VyQ29udGVudElubmVyLmZpbmQoJz5kaXYnKS5oZWlnaHQoKSA8IF93aW5kb3cuaGVpZ2h0KCkgKSB7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyAgICAgICAgaWYoIGN1ckNvbnRlbnQuZmluZCgnLmNvbnRhY3RzJykubGVuZ3RoICkge1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICBpZiggY3VyQ29udGVudC5maW5kKCcuY29udGFjdHNfX21hcCcpLmhlaWdodCgpIDwgY3VyQ29udGVudElubmVyLmZpbmQoJz5kaXYnKS5oZWlnaHQoKSApIHtcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIGN1ckNvbnRlbnRJbm5lci5hZGRDbGFzcygnY2VudGVyZWQnKTtcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIGN1ckNvbnRlbnRJbm5lci5yZW1vdmVDbGFzcygnY2VudGVyZWQnKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgY3VyQ29udGVudElubmVyLmFkZENsYXNzKCdjZW50ZXJlZCcpO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyAgICAgICAgY3VyQ29udGVudElubmVyLnJlbW92ZUNsYXNzKCdjZW50ZXJlZCcpO1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gICAgfVxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy99ICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcblxuXG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIFpvb21TaXRlID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQod2luZG93KSxcbiAgICAgICAgICAgIF9tYWluU2xpZGVyID0gJCgnLm1haW4tc2xpZGVyJyksXG4gICAgICAgICAgICBfY2FzZUhlcm8gPSAkKCcuY2FzZV9faGVybycpLFxuICAgICAgICAgICAgX2JvZHkgPSBfb2JqO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfb25FdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gNzY4ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NldFNpemUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9ib2R5LmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9udC1zaXplJzogJzc1cHgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX21haW5TbGlkZXIuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb250LXNpemUnOiAnNzVweCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2FzZUhlcm8uY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb250LXNpemUnOiAnNzVweCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XG5cbiAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDc2OCApIHtcblxuICAgICAgICAgICAgICAgICAgICBfc2V0U2l6ZSgpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX29ialswXS5vYmogPSBfc2VsZjtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9zZXRTaXplID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIG5ld1NpemU7XG5cbiAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy5oZWlnaHQoKSA+IDUwMCApIHtcblxuICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0gKCggMTAwICogKCB3aW5kb3cuaW5uZXJIZWlnaHQgLyA4MDAgKSApKSArICdweCdcblxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0gKCggMTAwICogKCA1MDAgLyA4MDAgKSApKSArICdweCdcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9ib2R5LmNzcygge1xuICAgICAgICAgICAgICAgICAgICAnZm9udC1zaXplJzogbmV3U2l6ZVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIF9tYWluU2xpZGVyLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAnZm9udC1zaXplJzogbmV3U2l6ZVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIF9jYXNlSGVyby5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgJ2ZvbnQtc2l6ZSc6IG5ld1NpemVcbiAgICAgICAgICAgICAgICB9ICk7XG5cblxuICAgICAgICAgICAgfTtcblxuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBNZW51ID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyksXG4gICAgICAgICAgICBfbWVudUJ0biA9IF9vYmouZmluZCgnLnNpdGVfX2hlYWRlcl9fYnRuJyksXG4gICAgICAgICAgICBfbWVudUl0ZW1zID0gX29iai5maW5kKCcuc2l0ZV9faGVhZGVyLW1lbnUnKSxcbiAgICAgICAgICAgIF9odG1sID0gJCgnaHRtbCcpLFxuICAgICAgICAgICAgX2JvZHkgPSAkKCdib2R5Jyk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9jbG9zZU1lbnUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICdvcGVuZWQnICk7XG5cbiAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpIDwgMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICBfaHRtbC5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdy15JzogJ2F1dG8nXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICAgICAgX2JvZHkuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cteSc6ICdhdXRvJ1xuICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfbWVudUl0ZW1zLmF0dHIoICdzdHlsZScsICcnICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfb25FdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy5zY3JvbGxUb3AoKSA+IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCdmaXhlZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcygnZml4ZWQnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2V0SGVhZGVySGVpZ2h0KCk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5zaXRlX19jb250ZW50JykuYXR0ciggJ3N0eWxlJywgJycgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIF9tZW51QnRuLm9uKCB7XG5cbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9vYmouaGFzQ2xhc3MoICdvcGVuZWQnICkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VNZW51KCk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vcGVuTWVudSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfb3Blbk1lbnUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdvcGVuZWQnICk7XG5cbiAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpIDwgMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICBfaHRtbC5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdy15JzogJ2hpZGRlbidcbiAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgICAgICBfYm9keS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdy15JzogJ2hpZGRlbidcbiAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NldEhlYWRlckhlaWdodCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYoIF9vYmouZmluZCgnLnNpdGVfX2hlYWRlci10aXRsZScpLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgICAgICAgICAkKCcuc2l0ZV9fY29udGVudCcpLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3BhZGRpbmctdG9wJzogJCgnLnNpdGVfX2hlYWRlci10aXRsZScpLm91dGVySGVpZ2h0KHRydWUpXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgX29ialswXS5vYmogPSBfc2VsZjtcblxuICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LnNjcm9sbFRvcCgpID4gX29iai5pbm5lckhlaWdodCgpLzIgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX29iai5hZGRDbGFzcygnZml4ZWQnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcygnZml4ZWQnKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICBfc2V0SGVhZGVySGVpZ2h0KCk7XG5cbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgfTtcblxuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBNYWluU2xpZGVyID0gZnVuY3Rpb24gKCBvYmogKSB7XG5cbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXG4gICAgICAgICAgICBfaGVhZGVyID0gJCggJy5zaXRlX19oZWFkZXInKSxcbiAgICAgICAgICAgIF9zdGVwMSA9IDE1LFxuICAgICAgICAgICAgX3N0ZXAyID0gMTAsXG4gICAgICAgICAgICBfc3RlcDMgPSA1LFxuICAgICAgICAgICAgX3N0ZXA0ID0gMjAsXG4gICAgICAgICAgICBfc3RlcDUgPSAyNSxcbiAgICAgICAgICAgIF9zd2lwZXIxLFxuICAgICAgICAgICAgX2dsb2JhbFdpZHRoID0gMDtcblxuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKFxuICAgICAgICAgICAgICAgICAgICAnbW91c2Vtb3ZlJyxcbiAgICAgICAgICAgICAgICAgICAgJy5tYWluLXNsaWRlciAuc3dpcGVyLXNsaWRlJyxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oIGUgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWRlID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaW1nMSA9IHNsaWRlLmZpbmQoJy5tb3ZlMTpub3QoLm5vdF9tb3ZlKScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pbWcyID0gc2xpZGUuZmluZCgnLm1vdmUyOm5vdCgubm90X21vdmUpJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ltZzMgPSBzbGlkZS5maW5kKCcubW92ZTM6bm90KC5ub3RfbW92ZSknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaW1nNCA9IHNsaWRlLmZpbmQoJy5tb3ZlNDpub3QoLm5vdF9tb3ZlKScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pbWc1ID0gc2xpZGUuZmluZCgnLm1vdmU1Om5vdCgubm90X21vdmUpJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggX3dpbmRvdy53aWR0aCgpID4gMTAyNCAmJiAhKCBfaGVhZGVyLmhhc0NsYXNzKCdvcGVuZWQnKSApICYmICEoICQoZG9jdW1lbnQpLmZpbmQoJy5tb3ZlJykuaGFzQ2xhc3MoJ2FuaW1hdGVkX21vdmVzJykgKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWdlWCA9IGUuY2xpZW50WCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVkgPSBlLmNsaWVudFksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbGZXaWR0aCA9IF9vYmoud2lkdGgoKSAvIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbGZIZWlnaHQgPSBfb2JqLmhlaWdodCgpIC8gMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyY2VudEZyb21DZW50ZXJYID0gKCBwYWdlWCAtIGhhbGZXaWR0aCApIC8gaGFsZldpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJjZW50RnJvbUNlbnRlclkgPSAoIHBhZ2VZIC0gaGFsZkhlaWdodCApIC8gaGFsZkhlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfd2luZG93Lm91dGVyV2lkdGgoKSA+IDEwMjQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbW92ZUJvdHRvbShwZXJjZW50RnJvbUNlbnRlclgsIHBlcmNlbnRGcm9tQ2VudGVyWSwgX3N0ZXAxLF9pbWcxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX21vdmVCb3R0b20ocGVyY2VudEZyb21DZW50ZXJYLCBwZXJjZW50RnJvbUNlbnRlclksIF9zdGVwMSwgJChkb2N1bWVudCkuZmluZCgnLmNvcHlfMScpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX21vdmVUb3AocGVyY2VudEZyb21DZW50ZXJYLCBwZXJjZW50RnJvbUNlbnRlclksIF9zdGVwMixfaW1nMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tb3ZlVG9wKHBlcmNlbnRGcm9tQ2VudGVyWCwgcGVyY2VudEZyb21DZW50ZXJZLCBfc3RlcDIsICQoZG9jdW1lbnQpLmZpbmQoJy5jb3B5XzInKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tb3ZlVG9wKHBlcmNlbnRGcm9tQ2VudGVyWCwgcGVyY2VudEZyb21DZW50ZXJZLCBfc3RlcDMsX2ltZzMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbW92ZVRvcChwZXJjZW50RnJvbUNlbnRlclgsIHBlcmNlbnRGcm9tQ2VudGVyWSwgX3N0ZXAzLCAkKGRvY3VtZW50KS5maW5kKCcuY29weV8zJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbW92ZUJvdHRvbShwZXJjZW50RnJvbUNlbnRlclgsIHBlcmNlbnRGcm9tQ2VudGVyWSwgX3N0ZXA0LF9pbWc0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX21vdmVCb3R0b20ocGVyY2VudEZyb21DZW50ZXJYLCBwZXJjZW50RnJvbUNlbnRlclksIF9zdGVwNCwgJChkb2N1bWVudCkuZmluZCgnLmNvcHlfNCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX21vdmVCb3R0b20ocGVyY2VudEZyb21DZW50ZXJYLCBwZXJjZW50RnJvbUNlbnRlclksIF9zdGVwNSxfaW1nNSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tb3ZlQm90dG9tKHBlcmNlbnRGcm9tQ2VudGVyWCwgcGVyY2VudEZyb21DZW50ZXJZLCBfc3RlcDUsICQoZG9jdW1lbnQpLmZpbmQoJy5jb3B5XzUnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2luaXRTd2lwZXIoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2dsb2JhbFdpZHRoID0gX3dpbmRvdy53aWR0aCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfZ2xvYmFsV2lkdGggIT0gX3dpbmRvdy53aWR0aCgpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2dsb2JhbFdpZHRoID0gX3dpbmRvdy53aWR0aCgpKzE7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPCAxMDI0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRIZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgJiYgc2NyZWVuLndpZHRoID49IDEwMjQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8kKCcubW92ZScpLmF0dHIoJ3N0eWxlJywgJycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfb2JqLmhhc0NsYXNzKCdtYWluLXNsaWRlcl9pbmRleCcpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRTZWN0aW9uID0gX29iai5wYXJlbnRzKCcuc2xpZGVfX2NvbnRlbnQnKS5uZXh0KCkuZmluZCgnLnNsaWRlX19jb250ZW50LWlubmVyJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IF9vYmouZmluZCgnLnN3aXBlci1zbGlkZS1hY3RpdmUnKS5pbm5lckhlaWdodCgpO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5zd2lwZXItc2xpZGUtYWN0aXZlIC5tb3ZlJykuZWFjaChmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmVnZXRhYmxlID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MgPSB2ZWdldGFibGUucG9zaXRpb24oKS50b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0VmVnID0gdmVnZXRhYmxlLmhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggcG9zICsgaGVpZ2h0VmVnID4gaGVpZ2h0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG51bSA9IHZlZ2V0YWJsZS5hdHRyKCdjbGFzcycpLnJlcGxhY2UoIC8oXi4rXFxEKShcXGQrKShcXEQuKyQpL2ksJyQyJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpZmYgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICQoJy5jb3B5X21vdmUuY29weV8nK251bSsnJykubGVuZ3RoICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvbGRJbWcgPSAgJCgnLmNvcHlfbW92ZS5jb3B5XycrbnVtKycnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggJCgnLnNsaWRlX19jb250ZW50JykuaW5uZXJIZWlnaHQoKSA8ICQoJy5tYWluLXNsaWRlcicpLmlubmVySGVpZ2h0KCkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpZmYgPSAkKCcubWFpbi1zbGlkZXInKS5pbm5lckhlaWdodCgpLSQoJy5zbGlkZV9fY29udGVudCcpLmlubmVySGVpZ2h0KClcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkSW1nLm9mZnNldCgge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiB2ZWdldGFibGUub2Zmc2V0KCkudG9wLWRpZmYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiB2ZWdldGFibGUub2Zmc2V0KCkubGVmdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkSW1nLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodDogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHZlZ2V0YWJsZS53aWR0aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiB2ZWdldGFibGUuaGVpZ2h0KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3SW1nID0gdmVnZXRhYmxlLmNsb25lKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0ltZy5hZGRDbGFzcygnY29weV9tb3ZlIGNvcHlfJytudW0rJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0U2VjdGlvbi5wcmVwZW5kKG5ld0ltZyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICQoJy5zbGlkZV9fY29udGVudCcpLmlubmVySGVpZ2h0KCkgPCAkKCcubWFpbi1zbGlkZXInKS5pbm5lckhlaWdodCgpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmID0gJCgnLm1haW4tc2xpZGVyJykuaW5uZXJIZWlnaHQoKS0kKCcuc2xpZGVfX2NvbnRlbnQnKS5pbm5lckhlaWdodCgpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0ltZy5vZmZzZXQoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogdmVnZXRhYmxlLm9mZnNldCgpLnRvcC1kaWZmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogdmVnZXRhYmxlLm9mZnNldCgpLmxlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0ltZy5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB2ZWdldGFibGUud2lkdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogdmVnZXRhYmxlLmhlaWdodCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG51bSA9IHZlZ2V0YWJsZS5hdHRyKCdjbGFzcycpLnJlcGxhY2UoIC8oXi4rXFxEKShcXGQrKShcXEQuKyQpL2ksJyQyJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuY29weV9tb3ZlLmNvcHlfJytudW0rJycpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTUwMCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib3JpZW50YXRpb25jaGFuZ2VcIiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBzY3JlZW4ud2lkdGggPCAxMDI0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NldEhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwICk7XG5cblxuICAgICAgICAgICAgICAgIH0sIGZhbHNlKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0U3dpcGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfc3dpcGVyMSA9IG5ldyBTd2lwZXIoIF9vYmouZmluZCggJy5zd2lwZXItY29udGFpbmVyJyApLCB7XG4gICAgICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IDcwMCxcbiAgICAgICAgICAgICAgICAgICAgbG9vcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiAnZmFkZScsXG4gICAgICAgICAgICAgICAgICAgIGZhZGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzRmFkZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBhdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgbmV4dEJ1dHRvbjogX29iai5maW5kKCcuc3dpcGVyLWJ1dHRvbi1uZXh0JylbMF0sXG4gICAgICAgICAgICAgICAgICAgIHByZXZCdXR0b246IF9vYmouZmluZCgnLnN3aXBlci1idXR0b24tcHJldicpWzBdLFxuICAgICAgICAgICAgICAgICAgICBvbkluaXQ6IGZ1bmN0aW9uKCBzd2lwZXIgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3RTbGlkZSA9IHN3aXBlci5zbGlkZXMuZmlsdGVyKCcuc3dpcGVyLXNsaWRlLWFjdGl2ZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb25JbmRleCA9IGFjdFNsaWRlLnBhcmVudHMoJy5zbGlkZV9fY29udGVudCcpLmluZGV4KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFNlY3Rpb24gPSAkKCcuc2xpZGVfX2NvbnRlbnQnKS5lcShzZWN0aW9uSW5kZXgrMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfb2JqLmhhc0NsYXNzKCdtYWluLXNsaWRlcl9pbmRleCcpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IGFjdFNsaWRlLmlubmVySGVpZ2h0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RTbGlkZS5maW5kKCcubW92ZScpLmVhY2goZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmVnZXRhYmxlID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IHZlZ2V0YWJsZS5wb3NpdGlvbigpLnRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodFZlZyA9IHZlZ2V0YWJsZS5oZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggcG9zICsgaGVpZ2h0VmVnID4gaGVpZ2h0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnVtID0gdmVnZXRhYmxlLmF0dHIoJ2NsYXNzJykucmVwbGFjZSggLyheLitcXEQpKFxcZCspKFxcRC4rJCkvaSwnJDInKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0ltZyA9IHZlZ2V0YWJsZS5jbG9uZSh0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW1nLmFkZENsYXNzKCdjb3B5X21vdmUgY29weV8nK251bSsnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0U2VjdGlvbi5wcmVwZW5kKG5ld0ltZyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAkKCcuc2xpZGVfX2NvbnRlbnQnKS5pbm5lckhlaWdodCgpIDwgJCgnLm1haW4tc2xpZGVyJykuaW5uZXJIZWlnaHQoKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpZmYgPSAkKCcubWFpbi1zbGlkZXInKS5pbm5lckhlaWdodCgpLSQoJy5zbGlkZV9fY29udGVudCcpLmlubmVySGVpZ2h0KClcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbWcub2Zmc2V0KCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiB2ZWdldGFibGUub2Zmc2V0KCkudG9wLWRpZmYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogdmVnZXRhYmxlLm9mZnNldCgpLmxlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW1nLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHZlZ2V0YWJsZS53aWR0aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogdmVnZXRhYmxlLmhlaWdodCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvblNsaWRlQ2hhbmdlU3RhcnQ6IGZ1bmN0aW9uKCBzd2lwZXIgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3RTbGlkZSA9IHN3aXBlci5zbGlkZXMuZmlsdGVyKCcuc3dpcGVyLXNsaWRlLWFjdGl2ZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb25JbmRleCA9IGFjdFNsaWRlLnBhcmVudHMoJy5zbGlkZV9fY29udGVudCcpLmluZGV4KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFNlY3Rpb24gPSAkKCcuc2xpZGVfX2NvbnRlbnQnKS5lcShzZWN0aW9uSW5kZXgrMSkuZmluZCgnLnNsaWRlX19jb250ZW50LWlubmVyJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5jb3B5X21vdmUnKS5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGFjdFNsaWRlLmZpbmQoJy5tYWluLXNsaWRlcl9fY29udGVudF9wdXJlJykubGVuZ3RoICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcuc3dpcGVyLWJ1dHRvbi1wcmV2JykuYWRkQ2xhc3MoJ2NvbG9yZWRfcHVyZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLnN3aXBlci1idXR0b24tbmV4dCcpLmFkZENsYXNzKCdjb2xvcmVkX3B1cmUnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLnN3aXBlci1idXR0b24tcHJldicpLnJlbW92ZUNsYXNzKCdjb2xvcmVkX3B1cmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5zd2lwZXItYnV0dG9uLW5leHQnKS5yZW1vdmVDbGFzcygnY29sb3JlZF9wdXJlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvblNsaWRlQ2hhbmdlRW5kOiBmdW5jdGlvbiggc3dpcGVyICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0U2xpZGUgPSBzd2lwZXIuc2xpZGVzLmZpbHRlcignLnN3aXBlci1zbGlkZS1hY3RpdmUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uSW5kZXggPSBhY3RTbGlkZS5wYXJlbnRzKCcuc2xpZGVfX2NvbnRlbnQnKS5pbmRleCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRTZWN0aW9uID0gJCgnLnNsaWRlX19jb250ZW50JykuZXEoc2VjdGlvbkluZGV4KzEpLmZpbmQoJy5zbGlkZV9fY29udGVudC1pbm5lcicpO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfb2JqLmhhc0NsYXNzKCdtYWluLXNsaWRlcl9pbmRleCcpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IGFjdFNsaWRlLmlubmVySGVpZ2h0KCk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdFNsaWRlLmZpbmQoJy5tb3ZlJykuZWFjaChmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2ZWdldGFibGUgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zID0gdmVnZXRhYmxlLnBvc2l0aW9uKCkudG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0VmVnID0gdmVnZXRhYmxlLmhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBwb3MgKyBoZWlnaHRWZWcgPiBoZWlnaHQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBudW0gPSB2ZWdldGFibGUuYXR0cignY2xhc3MnKS5yZXBsYWNlKCAvKF4uK1xcRCkoXFxkKykoXFxELiskKS9pLCckMicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpZmYgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3SW1nID0gdmVnZXRhYmxlLmNsb25lKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbWcuYWRkQ2xhc3MoJ2NvcHlfbW92ZSBjb3B5XycrbnVtKycnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRTZWN0aW9uLnByZXBlbmQobmV3SW1nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICQoJy5zbGlkZV9fY29udGVudCcpLmlubmVySGVpZ2h0KCkgPCAkKCcubWFpbi1zbGlkZXInKS5pbm5lckhlaWdodCgpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZiA9ICQoJy5tYWluLXNsaWRlcicpLmlubmVySGVpZ2h0KCktJCgnLnNsaWRlX19jb250ZW50JykuaW5uZXJIZWlnaHQoKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0ltZy5vZmZzZXQoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IHZlZ2V0YWJsZS5vZmZzZXQoKS50b3AtZGlmZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiB2ZWdldGFibGUub2Zmc2V0KCkubGVmdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbWcuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogdmVnZXRhYmxlLndpZHRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiB2ZWdldGFibGUuaGVpZ2h0KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9tb3ZlQm90dG9tID0gZnVuY3Rpb24oIHhQZXJjZW50LCB5UGVyY2VudCwgc3RlcCwgaW1hZ2UgKSB7XG5cbiAgICAgICAgICAgICAgICBpbWFnZS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3RyYW5zbGF0ZSggJyArIC0oIHhQZXJjZW50ICogc3RlcCApICsgJ3B4LCcgKyAtKCB5UGVyY2VudCAqIHN0ZXAgKSArICdweCApJyxcbiAgICAgICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGUoICcgKyAtKCB4UGVyY2VudCAqIHN0ZXAgKSArICdweCwgJyArIC0oIHlQZXJjZW50ICogc3RlcCApICsgJ3B4ICApJ1xuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9tb3ZlVG9wID0gZnVuY3Rpb24oIHhQZXJjZW50LCB5UGVyY2VudCwgc3RlcCwgaW1hZ2UgKSB7XG5cbiAgICAgICAgICAgICAgICBpbWFnZS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3RyYW5zbGF0ZSggJyArICggeFBlcmNlbnQgKiBzdGVwICkgKyAncHggLCcgKyAoIHlQZXJjZW50ICogc3RlcCApICsgJ3B4ICApJyxcbiAgICAgICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGUoICcgKyAoIHhQZXJjZW50ICogc3RlcCApICsgJ3B4ICwgJyArICggeVBlcmNlbnQgKiBzdGVwICkgKyAncHggICknXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IF93aW5kb3cuaGVpZ2h0KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIF9vYmoucGFyZW50cygnLmNhc2UnKS5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX29iai5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0ICsgaGVpZ2h0LzVcbiAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBfb2JqLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgfVxuXG5cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29ialswXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XG5cblxuICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPCAxMDI0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF9zZXRIZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfTtcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbiAgICB2YXIgRXhwZXJ0aXNlU2xpZGVyID0gZnVuY3Rpb24gKCBvYmogKSB7XG5cbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXG4gICAgICAgICAgICBfc3dpcGVySW5pdCA9IGZhbHNlLFxuICAgICAgICAgICAgX3N3aXBlcixcbiAgICAgICAgICAgIF9zY3JlZW5WYWwgPSBudWxsO1xuXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpIDwgX3NjcmVlblZhbCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhX3N3aXBlckluaXQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2luaXRTd2lwZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3N3aXBlckluaXQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX3N3aXBlckluaXQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Rlc3Ryb3lTd2lwZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3N3aXBlckluaXQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXRTd2lwZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF9zd2lwZXIgPSBuZXcgU3dpcGVyKCBfb2JqLmZpbmQoICcuc3dpcGVyLWNvbnRhaW5lcicgKSwge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLjksXG4gICAgICAgICAgICAgICAgICAgIGNlbnRlcmVkU2xpZGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiAoc3dpcGVyLCBldmVudCl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdvbkNsaWNrJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbGlja2VkID0gc3dpcGVyLmNsaWNrZWRJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlci5hY3RpdmVJbmRleCA9IGNsaWNrZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2lwZXIudXBkYXRlQ2xhc3NlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3N3aXBlci5zbGlkZVRvKGNsaWNrZWQsIDIwMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2Rlc3Ryb3lTd2lwZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF9zd2lwZXIuZGVzdHJveSggdHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2V0U2NyZWVuVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIF9vYmoucGFyZW50cygnLmV4cGVydGlzZV8zJykubGVuZ3RoICkgIHtcblxuICAgICAgICAgICAgICAgICAgICBfc2NyZWVuVmFsID0gMTAyNFxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBfc2NyZWVuVmFsID0gNzY4XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbMF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX3NldFNjcmVlblZhbHVlKCk7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuXG4gICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA8IF9zY3JlZW5WYWwgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoICFfc3dpcGVySW5pdCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2luaXRTd2lwZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zd2lwZXJJbml0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBTY3JvbGxEb3duID0gZnVuY3Rpb24gKCBvYmogKSB7XG5cbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfc2Nyb2xsZXIgPSAkKCAnaHRtbCwgYm9keScgKSxcbiAgICAgICAgICAgIF9tYWluU2xpZGVyUGljID0gJCgnLm1haW4tc2xpZGVyX19pbm5lci1waWMnKTtcblxuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF9vYmoub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfc2Nyb2xsZXIuYW5pbWF0ZSggeyBzY3JvbGxUb3A6IF9tYWluU2xpZGVyUGljLmlubmVySGVpZ2h0KCkgfSwgMzAwICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29ialswXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBSZXZpZXdzU2xpZGVyID0gZnVuY3Rpb24gKCBvYmogKSB7XG5cbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXG4gICAgICAgICAgICBfc3dpcGVyO1xuXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCkge1xuXG5cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXRTd2lwZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF9zd2lwZXIgPSBuZXcgU3dpcGVyKCBfb2JqLmZpbmQoICcuc3dpcGVyLWNvbnRhaW5lcicgKSwge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDMwLFxuICAgICAgICAgICAgICAgICAgICBzcGVlZDogNTAwLFxuICAgICAgICAgICAgICAgICAgICBsb29wOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlZmZlY3Q6ICdmYWRlJyxcbiAgICAgICAgICAgICAgICAgICAgZmFkZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Jvc3NGYWRlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBuZXh0QnV0dG9uOiBfb2JqLmZpbmQoJy5zd2lwZXItYnV0dG9uLW5leHQnKVswXSxcbiAgICAgICAgICAgICAgICAgICAgcHJldkJ1dHRvbjogX29iai5maW5kKCcuc3dpcGVyLWJ1dHRvbi1wcmV2JylbMF1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbMF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuICAgICAgICAgICAgICAgIF9pbml0U3dpcGVyKCk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIExvY2F0aW9uID0gZnVuY3Rpb24gKCBvYmogKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfbWFwID0gX29iai5maW5kKCcjY29udGFjdC1nb29nbGUtbWFwJyksXG4gICAgICAgICAgICBfbWFwTGF0ID0gX21hcC5kYXRhKCdtYXAtbGF0JyksXG4gICAgICAgICAgICBfbWFwTG5nID0gX21hcC5kYXRhKCdtYXAtbG5nJyksXG4gICAgICAgICAgICBfbWFwWm9vbSA9IF9tYXAuZGF0YSgnbWFwLXpvb20nKSxcbiAgICAgICAgICAgIF9idG4gPSAkKCcuY29udGFjdHNfX2NpdGllcyAuYnRuJyksXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXG4gICAgICAgICAgICBtYXAsXG4gICAgICAgICAgICBtYXJrZXI7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NldEhlaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NldEhlaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG5cblxuICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZERvbUxpc3RlbmVyKCB3aW5kb3csICdyZXNpemUnLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIF9idG4ubGVuZ3RoICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXlMYXRMbmcgPSB7bGF0OiBfYnRuLmZpbHRlcignLmFjdGl2ZScpLmRhdGEoJ21hcC1sYXQnKSwgbG5nOiBfYnRuLmZpbHRlcignLmFjdGl2ZScpLmRhdGEoJ21hcC1sbmcnKX07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5zZXRDZW50ZXIoIG15TGF0TG5nICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vX29mZnNldENlbnRlciggbWFwLmdldENlbnRlcigpLCAwLCAwKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgX2J0bi5vbigge1xuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhKGN1ckl0ZW0uaGFzQ2xhc3MoJ2FjdGl2ZScpKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9idG4ucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0uYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG15TGF0TG5nID0ge2xhdDogJCh0aGlzKS5kYXRhKCdtYXAtbGF0JyksIGxuZzogJCh0aGlzKS5kYXRhKCdtYXAtbG5nJyl9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlci5zZXRQb3NpdGlvbihteUxhdExuZyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9nb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKG1hcCwgJ3Jlc2l6ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXAuc2V0Q2VudGVyKG15TGF0TG5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9fb2Zmc2V0Q2VudGVyKCBtYXAuZ2V0Q2VudGVyKCksIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDMwMCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX29mZnNldENlbnRlciA9IGZ1bmN0aW9uICggbGF0bG5nLCBvZmZzZXR4LCBvZmZzZXR5ICkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHNjYWxlID0gTWF0aC5wb3coIDIsIG1hcC5nZXRab29tKCkgKSxcbiAgICAgICAgICAgICAgICAgICAgd29ybGRDb29yZGluYXRlQ2VudGVyID0gbWFwLmdldFByb2plY3Rpb24oKS5mcm9tTGF0TG5nVG9Qb2ludCggbGF0bG5nICksXG4gICAgICAgICAgICAgICAgICAgIHBpeGVsT2Zmc2V0ID0gbmV3IGdvb2dsZS5tYXBzLlBvaW50KCAoIG9mZnNldHgvc2NhbGUgKSB8fCAwLCAoIG9mZnNldHkvc2NhbGUgKSB8fCAwICksXG4gICAgICAgICAgICAgICAgICAgIHdvcmxkQ29vcmRpbmF0ZU5ld0NlbnRlciA9IG5ldyBnb29nbGUubWFwcy5Qb2ludChcblxuICAgICAgICAgICAgICAgICAgICAgICAgd29ybGRDb29yZGluYXRlQ2VudGVyLnggLSBwaXhlbE9mZnNldC54LFxuICAgICAgICAgICAgICAgICAgICAgICAgd29ybGRDb29yZGluYXRlQ2VudGVyLnkgKyBwaXhlbE9mZnNldC55XG5cbiAgICAgICAgICAgICAgICAgICAgKSxcblxuICAgICAgICAgICAgICAgICAgICBuZXdDZW50ZXIgPSBtYXAuZ2V0UHJvamVjdGlvbigpLmZyb21Qb2ludFRvTGF0TG5nKCB3b3JsZENvb3JkaW5hdGVOZXdDZW50ZXIgKTtcblxuICAgICAgICAgICAgICAgIG1hcC5zZXRDZW50ZXIoIG5ld0NlbnRlciApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXRNYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1c3RvbU1hcFR5cGUgPSBuZXcgZ29vZ2xlLm1hcHMuU3R5bGVkTWFwVHlwZShbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImh1ZVwiOiBcIiNiMDAwNDBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNhdHVyYXRpb25cIjogNjBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsaWdodG5lc3NcIjogLTQwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCIjZmY2ZmE0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCIjQjYxNTMwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIiNCNjE1MzBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge31cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiI0I2MTUzMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibGlnaHRuZXNzXCI6IDZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiI0I2MTUzMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibGlnaHRuZXNzXCI6IC0yNVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiI0I2MTUzMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibGlnaHRuZXNzXCI6IC0xMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiI0I2MTUzMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibGlnaHRuZXNzXCI6IDcwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdC5saW5lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIiNCNjE1MzBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImxpZ2h0bmVzc1wiOiA5MFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLmNvdW50cnlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInZpc2liaWxpdHlcIjogXCJvZmZcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQuc3RhdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidmlzaWJpbGl0eVwiOiBcIm9mZlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdC5zdGF0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCIjZmY2ZmE0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdDdXN0b20gU3R5bGUnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdmFyIGN1c3RvbU1hcFR5cGVJZCA9ICdjdXN0b21fc3R5bGUnO1xuXG4gICAgICAgICAgICAgICAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcCggX21hcFswXSwge1xuICAgICAgICAgICAgICAgICAgICB6b29tOiBfbWFwWm9vbSxcbiAgICAgICAgICAgICAgICAgICAgem9vbUNvbnRyb2w6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtYXBUeXBlQ29udHJvbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlQ29udHJvbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHN0cmVldFZpZXdDb250cm9sOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcm90YXRlQ29udHJvbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNlbnRlcjoge2xhdDogX21hcExhdCwgbG5nOiBfbWFwTG5nfSxcbiAgICAgICAgICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2xPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBUeXBlSWRzOiBbZ29vZ2xlLm1hcHMuTWFwVHlwZUlkLlJPQURNQVAsIGN1c3RvbU1hcFR5cGVJZF1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB7bGF0OiBfbWFwTGF0LCBsbmc6IF9tYXBMbmd9LFxuICAgICAgICAgICAgICAgICAgICBtYXA6IG1hcFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbWFwLm1hcFR5cGVzLnNldChjdXN0b21NYXBUeXBlSWQsIGN1c3RvbU1hcFR5cGUpO1xuICAgICAgICAgICAgICAgIG1hcC5zZXRNYXBUeXBlSWQoY3VzdG9tTWFwVHlwZUlkKTtcblxuICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyT25jZShtYXAsICdpZGxlJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBfYnRuLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG15TGF0TG5nID0ge2xhdDogX2J0bi5maWx0ZXIoJy5hY3RpdmUnKS5kYXRhKCdtYXAtbGF0JyksIGxuZzogX2J0bi5maWx0ZXIoJy5hY3RpdmUnKS5kYXRhKCdtYXAtbG5nJyl9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAuc2V0Q2VudGVyKCBteUxhdExuZyApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL19vZmZzZXRDZW50ZXIoIG1hcC5nZXRDZW50ZXIoKSwgMCwgMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkRG9tTGlzdGVuZXIod2luZG93LCAnbG9hZCcsIF9pbml0TWFwKTtcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgX3NldEhlaWdodCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9zZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBjb250ZW50SW5uZXIgPSAkKCcuY29udGFjdHNfX2lubmVyJyksXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRJbmZvID0gJCgnLmNvbnRhY3RzX19pbmZvJyksXG4gICAgICAgICAgICAgICAgICAgIHB1bHNlID0gJCgnLmNvbnRhY3RzX19wdWxzZScpO1xuXG4gICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSA3NjggKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIGNvbnRlbnRJbm5lci53aWR0aCgpID4gY29udGVudEluZm8uaW5uZXJIZWlnaHQoKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmhlaWdodCggY29udGVudElubmVyLndpZHRoKCkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vYmoud2lkdGgoIGNvbnRlbnRJbm5lci53aWR0aCgpICk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGNvbnRlbnRJbmZvLmlubmVySGVpZ2h0KCkgPiBjb250ZW50SW5mby5pbm5lcldpZHRoKCkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouaGVpZ2h0KCBjb250ZW50SW5mby5pbm5lckhlaWdodCgpKyhjb250ZW50SW5mby5pbm5lckhlaWdodCgpKjAuNikgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLndpZHRoKCBjb250ZW50SW5mby5pbm5lckhlaWdodCgpKyhjb250ZW50SW5mby5pbm5lckhlaWdodCgpKjAuNikgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouaGVpZ2h0KCBjb250ZW50SW5mby5pbm5lcldpZHRoKCkrKGNvbnRlbnRJbmZvLmlubmVyV2lkdGgoKSowLjYpICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai53aWR0aCggY29udGVudEluZm8uaW5uZXJXaWR0aCgpKyhjb250ZW50SW5mby5pbm5lcldpZHRoKCkqMC42KSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX29iai5hdHRyKCdzdHlsZScsJycpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHBvcyA9IHB1bHNlLm9mZnNldCgpLnRvcCAtIF9vYmoub2Zmc2V0KCkudG9wLFxuICAgICAgICAgICAgICAgICAgICBjZW50ZXIgPSBwdWxzZS5oZWlnaHQoKS8yICsgcG9zO1xuXG4gICAgICAgICAgICAgICAgX21hcC5oZWlnaHQoIGNlbnRlciAqIDIgKVxuXG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIE1haW5TbGlkZXJQaWN0dXJlcyA9IGZ1bmN0aW9uICggb2JqICkge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX3NsaWRlID0gX29iai5maW5kKCcuc3dpcGVyLXNsaWRlJyksXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9hZGRQaWN0dXJlcygpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfYWRkUGljdHVyZXMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF9zbGlkZS5maW5kKCcubW92ZScpLmVhY2goZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVmlldyA9IGN1ckl0ZW0uZGF0YSgndmlld3MnKTtcblxuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBkYXRhVmlldyAhPSB1bmRlZmluZWQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZGF0YVZpZXcubGVuZ3RoOyBpKysgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmVlZFZpZXc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVlZFZpZXcgPSBkYXRhVmlld1syXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggX3dpbmRvdy53aWR0aCgpIDwgMTAyNCAmJiBfd2luZG93LndpZHRoKCkgPj03NjggKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVlZFZpZXcgPSBkYXRhVmlld1sxXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggX3dpbmRvdy53aWR0aCgpIDwgNzY4ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRWaWV3ID0gZGF0YVZpZXdbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIG5lZWRWaWV3LnVybC5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYmFja2dyb3VuZC1pbWFnZSc6ICd1cmwoXCInKyBuZWVkVmlldy51cmwgKydcIiknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICdhdXRvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gbmVlZFZpZXcucG9zaXRpb25zKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLmNzcygga2V5LCBuZWVkVmlldy5wb3NpdGlvbnNba2V5XS8xMDAgKyAnZW0nICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgICAgICBfYWRkUGljdHVyZXMoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG59ICkoKTtcbiIsIiggZnVuY3Rpb24oKSB7XG5cbiAgICAkKCBmdW5jdGlvbigpIHtcbiAgICAgICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgICAgICQuZWFjaCggJCgnLmNvbnRhY3RzX19mb3JtJyksIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IENvbnRhY3RGb3JtKCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG5cbiAgICB9ICk7XG5cbiAgICB2YXIgQ29udGFjdEZvcm0gPSBmdW5jdGlvbiAob2JqKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfZm9ybUJvZHkgPSBfb2JqLmZpbmQoJy5nZm9ybV9ib2R5JyksXG4gICAgICAgICAgICBfYnRuU3VjY2VzcyA9ICQoJy5jb250YWN0c19fc3VjY2VzcyAuYnRuJyksXG4gICAgICAgICAgICBfZm9ybUNsb25lID0gJCgnLmdmb3JtX3dyYXBwZXInKSxcbiAgICAgICAgICAgIF9jb250YWN0Rm9ybSA9ICQoJy5jb250YWN0c19fZm9ybScpLFxuICAgICAgICAgICAgX3RleHRhcmVhV3JhcCA9IF9vYmouZmluZCgnLmdmaWVsZF90ZXh0YXJlYScpO1xuIFxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2NvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xuICAgICAgICAgICAgICAgIF9wYXN0ZUhlaWdodERpdigpO1xuICAgICAgICAgICAgICAgIF9nZXRDTG9uZUZvcm0oKTtcbiAgICAgICAgICAgICAgICAvLyBfcGFzdGVFcnJvcldyYXAoKTtcbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3Bhc3RlSGVpZ2h0RGl2ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfdGV4dGFyZWFXcmFwLmFwcGVuZCgnPGRpdiBjbGFzcz1cImNvbnRhY3RzX19maWVsZHMtdGV4dGFyZWEtaGVpZ2h0XCI+PC9kaXY+Jyk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfcGFzdGVFcnJvcldyYXAgPSBmdW5jdGlvbigpIHtcblxuXG4gICAgICAgICAgICAgICAgLy8gX29iai5maW5kKCcuZ2Zvcm1fYm9keScpLmFwcGVuZCgnPHNwYW4gY2xhc3M9XCJjb250YWN0c19fZmllbGRzLWVycm9yXCI+PC9zcGFuPicpO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2dldENMb25lRm9ybSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9mb3JtQ2xvbmUgPSBfZm9ybUNsb25lLmNsb25lKHRydWUpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgX2FkZEVycm9yVGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmdmb3JtX2JvZHknKS5hcHBlbmQoJzxzcGFuIGNsYXNzPVwiY29udGFjdHNfX2ZpZWxkcy1lcnJvclwiPjwvc3Bhbj4nKTtcbiAgICAgICAgICAgICAgICBpZiggX29iai5maW5kKCcuZ2ZpZWxkJykuaGFzQ2xhc3MoJ2dmaWVsZF9lcnJvcicpICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmdmb3JtX2JvZHknKS5maW5kKCcuY29udGFjdHNfX2ZpZWxkcy1lcnJvcicpLnRleHQoIF9vYmouZmluZCgnLmdmaWVsZF9lcnJvcjpmaXJzdCAudmFsaWRhdGlvbl9tZXNzYWdlJykudGV4dCgpICk7XG4gICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmdmaWVsZF9lcnJvcjpmaXJzdCBpbnB1dCwgLmdmaWVsZF9lcnJvcjpmaXJzdCB0ZXh0YXJlYScpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmdmb3JtX2JvZHknKS5maW5kKCcuY29udGFjdHNfX2ZpZWxkcy1lcnJvcicpLmFkZENsYXNzKCd2aXNpYmxlJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIF9mb3JtQm9keS5maW5kKCcuY29udGFjdHNfX2ZpZWxkcy1lcnJvcicpLnJlbW92ZUNsYXNzKCd2aXNpYmxlJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9vbkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLmJpbmQoJ2dmb3JtX2NvbmZpcm1hdGlvbl9sb2FkZWQnLCBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgICAgICBfY29udGFjdEZvcm0uZmluZCgnZGl2OmZpcnN0JykuYXBwZW5kKF9mb3JtQ2xvbmUpO1xuXG4gICAgICAgICAgICAgICAgICAgICQoJy5nZm9ybV93cmFwcGVyJykuZmluZCgnZm9ybScpWzBdLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkuYmluZCgnZ2Zvcm1fcG9zdF9yZW5kZXInLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBfcGFzdGVFcnJvcldyYXAoKTtcbiAgICAgICAgICAgICAgICAgICAgX2FkZEVycm9yVGV4dCgpO1xuICAgICAgICAgICAgICAgIH0gKTtcblxuXG4gICAgICAgICAgICAgICAgX3RleHRhcmVhV3JhcC5vbigge1xuICAgICAgICAgICAgICAgICAgICBrZXl1cDogZnVuY3Rpb24oIGUgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9ICQodGhpcykuZmluZCgndGV4dGFyZWEnKS52YWwoJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodFdyYXAgPSAkKCcuY29udGFjdHNfX2ZpZWxkcy10ZXh0YXJlYS1oZWlnaHQnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0V3JhcC5odG1sKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90ZXh0YXJlYVdyYXAuY3NzKCAnaGVpZ2h0JywgaGVpZ2h0V3JhcC5pbm5lckhlaWdodCgpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGUua2V5Q29kZSA9PSAxMyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGV4dGFyZWFXcmFwLmNzcyggJ2hlaWdodCcsIGhlaWdodFdyYXAuaW5uZXJIZWlnaHQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF9idG5TdWNjZXNzLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5nZm9ybV93cmFwcGVyJykuZmluZCgnZm9ybScpWzBdLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZ2V0Q0xvbmVGb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcblxuICAgICAgICBfY29uc3RydWN0b3IoKTtcbiAgICB9O1xuXG59ICkoKTtcblxuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
