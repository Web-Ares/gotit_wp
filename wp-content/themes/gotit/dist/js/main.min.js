"use strict";!function(){$(function(){new e($(".preloader")),$.each($(".site__index-page"),function(){new t($(this))}),$.each($("body"),function(){new n($(this))}),$.each($(".site__header"),function(){new i($(this))}),$.each($(".main-slider"),function(){new o($(this))}),$.each($(".expertise__items"),function(){new s($(this))}),$.each($(".reviews"),function(){new r($(this))}),$.each($(".contacts__map"),function(){new l($(this))}),$.each($(".case .main-slider__btn-down"),function(){new a($(this))})});var e=function(e){var t=this,n=$(window),i=e,o=$("body"),s=function(){n.on({load:function(){r()}})},a=function(){o[0].preloader=t,s()},r=function(){i.addClass("preloader_loaded"),setTimeout(function(){i.remove(),$(".site").addClass("site__loaded")},500)};a()},t=function(e){var t=this,n=e,i=$(window),o=$("html, body"),s=!1,a=(n.find(".slide__content"),$(".main-slider")),r=a.find(".main-slider__btn-down"),l=function(){i.on({load:function(){i.width()>=1024&&(s||(d(),f(),s=!0))},resize:function(){i.width()>=1024?(s||(d(),s=!0),f()):s&&(c(),s=!1)}}),r.on({click:function(){return i.width()>=1024?(console.log(300),$(this).parents(".case").length?(console.log("case"),o.stop(!0,!1),o.animate({scrollTop:a.innerHeight()},300)):$.fn.fullpage.moveTo(2)):(o.stop(!0,!1),o.animate({scrollTop:a.innerHeight()},300)),!1}})},d=function(){$("#fullpage").fullpage({scrollOverflow:!0,sectionSelector:".slide__content",onLeave:function(e,t,n,i,o){t>1?$(".logo_index").hide():$(".logo_index").show();var s=$(".slide__content").eq(t-1).find(".slide__content-inner>div>div");s.hasClass("reviews")&&s.find(".reviews__item").addClass("animation")}})},c=function(){$.fn.fullpage.destroy("all")},f=function(){},p=function(){n[0].obj=t,l()};p()},n=function(e){var t=this,n=e,i=$(window),o=$("body"),s=function(){i.on({resize:function(){i.width()>=768?r():o.css({"font-size":"20px"})}})},a=function(){s(),i.width()>=768&&r(),n[0].obj=t},r=function(){var e;e=i.height()>500?100*(window.innerHeight/900)/5+"px":100*(500/900)/5+"px",o.css({"font-size":e})};a()},i=function(e){var t=this,n=e,i=$(window),o=n.find(".site__header__btn"),s=n.find(".site__header-menu"),a=$("html"),r=$("body"),l=function(){n.removeClass("opened"),i.width()<1024&&(a.css({"overflow-y":"auto"}),r.css({"overflow-y":"auto"})),s.attr("style","")},d=function(){i.on({scroll:function(){i.scrollTop()>0?n.addClass("fixed"):n.removeClass("fixed")}}),o.on({click:function(){return n.hasClass("opened")?l():c(),!1}})},c=function(){n.addClass("opened"),i.width()<1024&&(a.css({"overflow-y":"hidden"}),r.css({"overflow-y":"hidden"}))},f=function(){d(),n[0].obj=t,i.scrollTop()>n.innerHeight()?n.addClass("fixed"):n.removeClass("fixed")};f()},o=function(e){var t,n=this,i=e,o=$(window),s=$(".site__header"),a=15,r=10,l=5,d=20,c=25,f=function(){$(document).on("mousemove",".main-slider .swiper-slide",function(e){e=e||window.event;var t=$(this),n=t.find(".move1"),f=t.find(".move2"),p=t.find(".move3"),g=t.find(".move4"),m=t.find(".move5");if(o.width()>1024&&!s.hasClass("opened")){var w=e.pageX,_=e.pageY,v=i.width()/2,y=i.height()/2,b=(w-v)/v,C=(_-y)/y;o.outerWidth()>1024&&(h(b,C,a,n),h(b,C,a,$(document).find(".copy_1")),u(b,C,r,f),u(b,C,r,$(document).find(".copy_2")),u(b,C,l,p),u(b,C,l,$(document).find(".copy_3")),h(b,C,d,g),h(b,C,d,$(document).find(".copy_4")),h(b,C,c,m),h(b,C,c,$(document).find(".copy_5")))}}),o.on({load:function(){p()},resize:function(){if(o.width()>=1024&&screen.width>=1024&&(i.attr("style",""),$(".vegetables").attr("style","")),i.hasClass("main-slider_index")){var e=i.parents(".slide__content").next().find(".slide__content-inner"),t=i.find(".swiper-slide-active").innerHeight();setTimeout(function(){i.find(".swiper-slide-active .vegetables").each(function(){var n=$(this),i=n.position().top,o=n.height();if(i+o>t){var s=n.attr("class").replace(/(^.+\D)(\d+)(\D.+$)/i,"$2"),a=0;if($(".copy_move.copy_"+s).length){var r=$(".copy_move.copy_"+s);$(".slide__content").innerHeight()<$(".main-slider").innerHeight()&&(a=$(".main-slider").innerHeight()-$(".slide__content").innerHeight()),r.offset({top:n.offset().top-a,left:n.offset().left}),r.css({bottom:"auto",right:"auto"})}else{var l=n.clone(!0);l.addClass("copy_move copy_"+s),e.prepend(l),$(".slide__content").innerHeight()<$(".main-slider").innerHeight()&&(a=$(".main-slider").innerHeight()-$(".slide__content").innerHeight()),l.offset({top:n.offset().top-a,left:n.offset().left}),l.css({bottom:"auto",right:"auto"})}}else{var s=n.attr("class").replace(/(^.+\D)(\d+)(\D.+$)/i,"$2");$("copy_move copy_"+s).remove()}})},1500)}}}),window.addEventListener("orientationchange",function(){setTimeout(function(){screen.width<1024&&g()},500)},!1)},p=function(){t=new Swiper(i.find(".swiper-container"),{spaceBetween:0,slidesPerView:1,loop:!0,speed:700,effect:"fade",fade:{crossFade:!0},autoplayDisableOnInteraction:!1,nextButton:i.find(".swiper-button-next")[0],prevButton:i.find(".swiper-button-prev")[0],onInit:function(e){var t=e.slides.filter(".swiper-slide-active"),n=t.parents(".slide__content").index(),o=$(".slide__content").eq(n+1);if(i.hasClass("main-slider_index")){var s=t.innerHeight();t.find(".vegetables").each(function(){var e=$(this),t=e.position().top,n=e.height();if(t+n>s){var i=e.attr("class").replace(/(^.+\D)(\d+)(\D.+$)/i,"$2"),a=0,r=e.clone(!0);r.addClass("copy_move copy_"+i),o.prepend(r),$(".slide__content").innerHeight()<$(".main-slider").innerHeight()&&(a=$(".main-slider").innerHeight()-$(".slide__content").innerHeight()),r.offset({top:e.offset().top-a,left:e.offset().left}),r.css({bottom:"auto",right:"auto"})}})}},onSlideChangeStart:function(e){var t=e.slides.filter(".swiper-slide-active"),n=t.parents(".slide__content").index();$(".slide__content").eq(n+1).find(".slide__content-inner");$(".copy_move").remove()},onSlideChangeEnd:function(e){var t=e.slides.filter(".swiper-slide-active"),n=t.parents(".slide__content").index(),o=$(".slide__content").eq(n+1).find(".slide__content-inner");if(i.hasClass("main-slider_index")){var s=t.innerHeight();t.find(".vegetables").each(function(){var e=$(this),t=e.position().top,n=e.height();if(t+n>s){var i=e.attr("class").replace(/(^.+\D)(\d+)(\D.+$)/i,"$2"),a=0,r=e.clone(!0);r.addClass("copy_move copy_"+i),o.prepend(r),$(".slide__content").innerHeight()<$(".main-slider").innerHeight()&&(a=$(".main-slider").innerHeight()-$(".slide__content").innerHeight()),r.offset({top:e.offset().top-a,left:e.offset().left}),r.css({bottom:"auto",right:"auto"})}})}}})},h=function(e,t,n,i){i.css({"-webkit-transform":"translate( "+-(e*n)+"px,"+-(t*n)+"px )",transform:"translate( "+-(e*n)+"px, "+-(t*n)+"px  )"})},u=function(e,t,n,i){i.css({"-webkit-transform":"translate( "+e*n+"px ,"+t*n+"px  )",transform:"translate( "+e*n+"px , "+t*n+"px  )"})},g=function(){var e=o.height();i.innerHeight(e)},m=function(){i[0].obj=n,f(),o.width()<1024&&g()};m()},s=function(e){var t,n=this,i=e,o=$(window),s=!1,a=function(){o.on({resize:function(){o.width()<768?s||(r(),s=!0):s&&(l(),s=!1)}})},r=function(){t=new Swiper(i.find(".swiper-container"),{slidesPerView:1.9,centeredSlides:!0})},l=function(){t.destroy(!0,!0)},d=function(){i[0].obj=n,a(),o.width()<768&&(s||(r(),s=!0))};d()},a=function(e){var t=this,n=e,i=$("html, body"),o=$(".main-slider__inner-pic"),s=function(){n.on({click:function(){return console.log(300),i.animate({scrollTop:o.innerHeight()},300),!1}})},a=function(){n[0].obj=t,s()};a()},r=function(e){var t,n=this,i=e,o=$(window),s=function(){o.on({resize:function(){}})},a=function(){t=new Swiper(i.find(".swiper-container"),{slidesPerView:1,spaceBetween:30,loop:!0,speed:500,effect:"fade",fade:{crossFade:!0},autoplayDisableOnInteraction:!1,nextButton:i.find(".swiper-button-next")[0],prevButton:i.find(".swiper-button-prev")[0]})},r=function(){i[0].obj=n,s(),a()};r()},l=function(e){var t,n,i=e,o=i.find("#contact-google-map"),s=o.data("map-lat"),a=o.data("map-lng"),r=o.data("map-zoom"),l=$(".contacts__cities .btn"),d=$(window),c=function(){d.on({load:function(){u()},resize:function(){u()}}),google.maps.event.addDomListener(window,"resize",function(){if(l.length){var e={lat:l.filter(".active").data("map-lat"),lng:l.filter(".active").data("map-lng")};t.setCenter(e),f(t.getCenter(),0,50)}}),l.on({click:function(){var e=$(this);if(!e.hasClass("active")){l.removeClass("active"),e.addClass("active");var i={lat:$(this).data("map-lat"),lng:$(this).data("map-lng")};n.setPosition(i),setTimeout(function(){google.maps.event.trigger(t,"resize"),t.setCenter(i),f(t.getCenter(),0,50)},300)}return!1}})},f=function(e,n,i){var o=Math.pow(2,t.getZoom()),s=t.getProjection().fromLatLngToPoint(e),a=new google.maps.Point(n/o||0,i/o||0),r=new google.maps.Point(s.x-a.x,s.y+a.y),l=t.getProjection().fromPointToLatLng(r);t.setCenter(l)},p=function(){var e=new google.maps.StyledMapType([{stylers:[{hue:"#b00040"},{saturation:60},{lightness:-40}]},{elementType:"labels.text.fill",stylers:[{color:"#ff6fa4"}]},{featureType:"water",stylers:[{color:"#B61530"}]},{featureType:"road",stylers:[{color:"#B61530"},{}]},{featureType:"road.local",stylers:[{color:"#B61530"},{lightness:6}]},{featureType:"road.highway",stylers:[{color:"#B61530"},{lightness:-25}]},{featureType:"road.arterial",stylers:[{color:"#B61530"},{lightness:-10}]},{featureType:"transit",stylers:[{color:"#B61530"},{lightness:70}]},{featureType:"transit.line",stylers:[{color:"#B61530"},{lightness:90}]},{featureType:"administrative.country",elementType:"labels",stylers:[{visibility:"off"}]},{featureType:"transit.station",elementType:"labels.text.stroke",stylers:[{visibility:"off"}]},{featureType:"transit.station",elementType:"labels.text.fill",stylers:[{color:"#ff6fa4"}]}],{name:"Custom Style"}),i="custom_style";t=new google.maps.Map(o[0],{zoom:r,zoomControl:!1,mapTypeControl:!1,scaleControl:!1,streetViewControl:!1,rotateControl:!1,center:{lat:s,lng:a},mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,i]}}),n=new google.maps.Marker({position:{lat:s,lng:a},map:t}),t.mapTypes.set(i,e),t.setMapTypeId(i),google.maps.event.addListenerOnce(t,"idle",function(){if(l.length){var e={lat:l.filter(".active").data("map-lat"),lng:l.filter(".active").data("map-lng")};t.setCenter(e),f(t.getCenter(),0,50)}})},h=function(){google.maps.event.addDomListener(window,"load",p),c(),u()},u=function(){var e=$(".contacts__info");d.width()>=768?(e.innerHeight()>e.innerWidth()?(i.height(e.innerHeight()+.25*e.innerHeight()),i.width(e.innerHeight()+.25*e.innerHeight())):(i.height(e.innerWidth()+.25*e.innerWidth()),i.width(e.innerWidth()+.25*e.innerWidth())),e.parents(".contacts").hasClass("contacts_2")&&(e.innerHeight()>e.innerWidth()?(i.height(e.innerHeight()+.6*e.innerHeight()),i.width(e.innerHeight()+.6*e.innerHeight())):(i.height(e.innerWidth()+.6*e.innerWidth()),i.width(e.innerWidth()+.6*e.innerWidth())))):i.attr("style","")};h()}}();
//# sourceMappingURL=data:application/json;base64,
