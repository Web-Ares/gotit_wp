"use strict";!function(){$(function(){new e($(".preloader")),$.each($(".site__index-page"),function(){new n($(this))}),$.each($("body"),function(){new t($(this))}),$.each($(".site__header"),function(){new i($(this))}),$.each($(".main-slider"),function(){new o($(this))}),$.each($(".expertise__items"),function(){new s($(this))}),$.each($(".squad__items"),function(){new a($(this))}),$.each($(".our-clients__items"),function(){new r($(this))}),$.each($(".reviews"),function(){new l($(this))}),$.each($(".contacts__map"),function(){new c($(this))})});var e=function(e){var n=this,t=$(window),i=e,o=$("body"),s=function(){t.on({load:function(){r()}})},a=function(){o[0].preloader=n,s()},r=function(){i.addClass("preloader_loaded"),setTimeout(function(){i.remove(),$(".site").addClass("site__loaded")},500)};a()},n=function(e){var n,t=this,i=e,o=$(window),s=$("html, body"),a=!1,r=!1,l=!1,c=0,d=!1,u=i.find(".swiper-slide__content"),f=$(".main-slider"),p=f.find(".main-slider__btn-down"),w=function(){u.on({scroll:function(){if(d){var e=i.find(".site__index-swiper .swiper-slide-active"),t=e.find(".swiper-slide__content"),o=t.find(">div");g(t),m(t,o),r&&!l&&c<0&&(n.unlockSwipeToPrev(),n.enableMousewheelControl()),l&&!r&&c>0&&(n.unlockSwipeToNext(),n.enableMousewheelControl()),l||r||(n.lockSwipes(),n.disableMousewheelControl())}}}),o.on({resize:function(){if(o.width()>=768?d||(y(),d=!0):d&&(b(),d=!1),d){var e=i.find(".site__index-swiper .swiper-slide-active"),n=e.find(".swiper-slide__content"),t=n.find(">div");v(t),_()}}}),u.on({DOMMouseScroll:function(e){var t=e.originalEvent.detail;t&&(c=t>0?1:-1,h(c)),r&&!l&&c>0&&(n.lockSwipeToPrev(),n.disableMousewheelControl()),l&&!r&&c<0&&(n.lockSwipeToNext(),n.disableMousewheelControl()),r&&!l&&c<0&&(n.unlockSwipeToPrev(),n.enableMousewheelControl()),l&&!r&&c>0&&(n.unlockSwipeToNext(),n.enableMousewheelControl())},mousewheel:function(e){var t=e.originalEvent.wheelDelta;t&&(c=t>0?-1:1,h(c)),r&&!l&&c>0&&(n.lockSwipeToPrev(),n.disableMousewheelControl()),l&&!r&&c<0&&(n.lockSwipeToNext(),n.disableMousewheelControl()),r&&!l&&c<0&&(n.unlockSwipeToPrev(),n.enableMousewheelControl()),l&&!r&&c>0&&(n.unlockSwipeToNext(),n.enableMousewheelControl())}}),p.on({click:function(){return o.width()>=768?n.slideNext(!0,600):(s.stop(!0,!1),s.animate({scrollTop:f.innerHeight()},300)),!1}})},h=function(e){e<0&&r&&d&&(n.unlockSwipeToPrev(),n.enableMousewheelControl())},v=function(e){a=o.scrollTop()+o.height()>=e.innerHeight()},g=function(e){r=e.scrollTop()<=0},m=function(e,n){l=e.scrollTop()+o.height()>=n.innerHeight()},y=function(){n=new Swiper(".site__index-swiper",{direction:"vertical",spaceBetween:0,speed:700,slidesPerView:1,simulateTouch:!1,autoHeight:"auto",mousewheelControl:!0,onInit:function(e){var n=i.find(".site__index-swiper .swiper-slide-active"),t=n.find(".swiper-slide__content"),o=n.find(".swiper-slide__content>div");c=0,v(o),g(t),m(t,o),a?(e.unlockSwipes(),e.enableMousewheelControl()):(e.lockSwipes(),e.disableMousewheelControl(),e.disableKeyboardControl(),h(c))},onSlideChangeStart:function(e){var n=e.activeIndex;n>0?$(".logo_index").hide():$(".logo_index").show()},onSlideChangeEnd:function(e){var n=i.find(".site__index-swiper .swiper-slide-active"),t=n.find(".swiper-slide__content"),o=n.find(".swiper-slide__content>div");c=0,v(o),g(t),m(t,o),a?(e.unlockSwipes(),e.enableMousewheelControl()):(e.lockSwipes(),e.disableMousewheelControl(),e.disableKeyboardControl(),h(c))}})},b=function(){n.destroy(!0,!0)},_=function(){u.each(function(){var e=$(this),n=e.find(">div");e.innerHeight()>n.innerHeight()?e.addClass("centered"):e.removeClass("centered")})},C=function(){i[0].obj=t,w(),o.width()>=768&&(d||(y(),_(),d=!0))};C()},t=function(e){var n=this,t=e,i=$(window),o=$("body"),s=function(){i.on({resize:function(){i.width()>=1024?r():o.css({"font-size":"75px"})}})},a=function(){s(),i.width()>=1024&&r(),t[0].obj=n},r=function(){var e;e=i.height()>500?100*(window.innerHeight/900)+"px":100*(500/900)+"px",o.css({"font-size":e})};a()},i=function(e){var n=this,t=e,i=$(window),o=t.find(".site__header__btn"),s=t.find(".site__header-menu"),a=$("html"),r=$("body"),l=function(){t.removeClass("opened"),a.css({"overflow-y":"auto"}),r.css({"overflow-y":"auto"}),s.attr("style","")},c=function(){i.on({resize:function(){t.hasClass("opened")&&l()}}),o.on({click:function(){return t.hasClass("opened")?l():d(),!1}})},d=function(){t.addClass("opened"),a.css({"overflow-y":"hidden"}),r.css({"overflow-y":"hidden"})},u=function(){c(),t[0].obj=n};u()},o=function(e){var n,t=this,i=e,o=$(window),s=$(".site__header"),a=i.find(".vegetable1"),r=i.find(".vegetable2"),l=i.find(".vegetable3"),c=i.find(".vegetable4"),d=i.find(".vegetable5"),u=15,f=10,p=5,w=20,h=25,v=function(){o.on({mousemove:function(e){if(o.width()>1024&&!s.hasClass("opened")){var n=e.pageX,t=e.pageY,v=i.width()/2,g=i.height()/2,b=(n-v)/v,_=(t-g)/g;o.outerWidth()>768&&(m(b,_,u,a),y(b,_,f,r),y(b,_,p,l),m(b,_,w,c),m(b,_,h,d))}}})},g=function(){n=new Swiper(i.find(".swiper-container"),{spaceBetween:0,slidesPerView:1,loop:!0,autoplay:5e3,speed:600,autoplayDisableOnInteraction:!1,nextButton:i.find(".swiper-button-next")[0],prevButton:i.find(".swiper-button-prev")[0]})},m=function(e,n,t,i){i.css({"-webkit-transform":"translate( "+-(e*t)+"px,"+-(n*t)+"px )",transform:"translate( "+-(e*t)+"px, "+-(n*t)+"px  )"})},y=function(e,n,t,i){i.css({"-webkit-transform":"translate( "+e*t+"px ,"+n*t+"px  )",transform:"translate( "+e*t+"px , "+n*t+"px  )"})},b=function(){i[0].obj=t,v(),g()};b()},s=function(e){var n,t=this,i=e,o=$(window),s=!1,a=function(){o.on({resize:function(){o.width()<768?s||(r(),s=!0):s&&(l(),s=!1)}})},r=function(){n=new Swiper(i.find(".swiper-container"),{slidesPerView:1.9,centeredSlides:!0})},l=function(){n.destroy(!0,!0)},c=function(){i[0].obj=t,a(),o.width()<768&&(s||(r(),s=!0))};c()},a=function(e){var n,t=this,i=e,o=$(window),s=!1,a=$(".squad"),r=$(".squad__disk"),l=function(){o.on({load:function(){u()},resize:function(){o.width()<768?s||(c(),s=!0):s&&(d(),s=!1),u()}})},c=function(){n=new Swiper(i.find(".swiper-container"),{slidesPerView:1.75,centeredSlides:!0})},d=function(){n.destroy(!0,!0)},u=function(){var e,n=a.innerHeight(),t=a.innerWidth();e=n>t?t:n,r.width(e),r.height(e)},f=function(){i[0].obj=t,l(),o.width()<768&&(s||(c(),s=!0))};f()},r=function(e){var n,t=this,i=e,o=$(window),s=function(){o.on({resize:function(){}})},a=function(){n=new Swiper(i.find(".swiper-container"),{slidesPerView:5,nextButton:i.find(".swiper-button-next")[0],prevButton:i.find(".swiper-button-prev")[0],breakpoints:{1024:{slidesPerView:3},768:{slidesPerView:1,loop:!0,autoplay:7e3,autoplayDisableOnInteraction:!1}}})},r=function(){i[0].obj=t,s(),a()};r()},l=function(e){var n,t=this,i=e,o=$(window),s=function(){o.on({resize:function(){}})},a=function(){n=new Swiper(i.find(".swiper-container"),{slidesPerView:1,spaceBetween:30,loop:!0,autoplay:7e3,speed:500,autoplayDisableOnInteraction:!1,nextButton:i.find(".swiper-button-next")[0],prevButton:i.find(".swiper-button-prev")[0]})},r=function(){i[0].obj=t,s(),a()};r()},c=function(e){var n,t,i=e,o=i.find("#contact-google-map"),s=o.data("map-lat"),a=o.data("map-lng"),r=o.data("map-zoom"),l=$(".contacts__cities .btn"),c=$(window),d=function(){c.on({load:function(){o.height($(".contacts__inner").innerHeight())},resize:function(){o.height($(".contacts__inner").innerHeight())}}),google.maps.event.addDomListener(window,"resize",function(){var e={lat:l.filter(".active").data("map-lat"),lng:l.filter(".active").data("map-lng")};n.setCenter(e),u(n.getCenter(),0,0)}),l.on({click:function(){var e=$(this);if(!e.hasClass("active")){l.removeClass("active"),e.addClass("active");var i={lat:$(this).data("map-lat"),lng:$(this).data("map-lng")};t.setPosition(i),setTimeout(function(){google.maps.event.trigger(n,"resize"),n.setCenter(i)},300)}}})},u=function(e,t,i){var o=Math.pow(2,n.getZoom()),s=n.getProjection().fromLatLngToPoint(e),a=new google.maps.Point(t/o||0,i/o||0),r=new google.maps.Point(s.x-a.x,s.y+a.y),l=n.getProjection().fromPointToLatLng(r);n.setCenter(l)},f=function(){var e=new google.maps.StyledMapType([{stylers:[{hue:"#b00040"},{saturation:60},{lightness:-40}]},{elementType:"labels.text.fill",stylers:[{color:"#ff6fa4"}]},{featureType:"water",stylers:[{color:"#B61530"}]},{featureType:"road",stylers:[{color:"#B61530"},{}]},{featureType:"road.local",stylers:[{color:"#B61530"},{lightness:6}]},{featureType:"road.highway",stylers:[{color:"#B61530"},{lightness:-25}]},{featureType:"road.arterial",stylers:[{color:"#B61530"},{lightness:-10}]},{featureType:"transit",stylers:[{color:"#B61530"},{lightness:70}]},{featureType:"transit.line",stylers:[{color:"#B61530"},{lightness:90}]},{featureType:"administrative.country",elementType:"labels",stylers:[{visibility:"off"}]},{featureType:"transit.station",elementType:"labels.text.stroke",stylers:[{visibility:"off"}]},{featureType:"transit.station",elementType:"labels.text.fill",stylers:[{color:"#ff6fa4"}]}],{name:"Custom Style"}),i="custom_style";n=new google.maps.Map(o[0],{zoom:r,center:{lat:s,lng:a},mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,i]}}),t=new google.maps.Marker({position:{lat:s,lng:a},map:n}),n.mapTypes.set(i,e),n.setMapTypeId(i),google.maps.event.addListenerOnce(n,"idle",function(){var e={lat:l.filter(".active").data("map-lat"),lng:l.filter(".active").data("map-lng")};n.setCenter(e),u(n.getCenter(),0,0)})},p=function(){google.maps.event.addDomListener(window,"load",f),d()};p()}}();
//# sourceMappingURL=data:application/json;base64,
