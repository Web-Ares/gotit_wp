"use strict";!function(){$(function(){new e($(".preloader")),$.each($(".site__index-page"),function(){new t($(this))}),$.each($("body"),function(){new n($(this))}),$.each($(".site__header"),function(){new i($(this))}),$.each($(".main-slider"),function(){new o($(this)),new l($(this))}),$.each($(".expertise__items"),function(){new s($(this))}),$.each($(".reviews"),function(){new r($(this))}),$.each($(".contacts__map"),function(){new d($(this))}),$.each($(".case .main-slider__btn-down"),function(){new a($(this))})});var e=function(e){var t=this,n=$(window),i=e,o=$("body"),s=function(){n.on({load:function(){r()}})},a=function(){o[0].preloader=t,s()},r=function(){i.addClass("preloader_loaded"),setTimeout(function(){i.remove(),$(".site").addClass("site__loaded")},500)};a()},t=function(e){var t=this,n=e,i=$(window),o=$("html, body"),s=!1,a=(n.find(".slide__content"),$(".main-slider")),r=a.find(".main-slider__btn-down"),d=function(){i.on({load:function(){i.width()>=1024&&(s||(l(),f(),s=!0))},resize:function(){i.width()>=1024?(s||(l(),s=!0),f()):s&&(c(),s=!1)}}),r.on({click:function(){return i.width()>=1024?(console.log(300),$(this).parents(".case").length?(o.stop(!0,!1),o.animate({scrollTop:a.innerHeight()},300)):$.fn.fullpage.moveTo(2)):(o.stop(!0,!1),o.animate({scrollTop:a.innerHeight()},300)),!1}})},l=function(){$("#fullpage").fullpage({scrollOverflow:!0,sectionSelector:".slide__content",onLeave:function(e,t,n,i,o){t>1?($(".logo_index").hide(),$(".move").addClass("moves_up animated_moves")):($(".logo_index").show(),setTimeout(function(){$(".move").removeClass("moves_up")},300),setTimeout(function(){$(".move").removeClass("animated_moves")},800));var s=$(".slide__content").eq(t-1).find(".slide__content-inner>div>div");s.hasClass("reviews")&&s.find(".reviews__item").addClass("animation")}})},c=function(){$.fn.fullpage.destroy("all")},f=function(){},h=function(){n[0].obj=t,d()};h()},n=function(e){var t=this,n=e,i=$(window),o=$(".main-slider"),s=$(".case__hero"),a=$("body"),r=function(){i.on({resize:function(){i.width()>=768?l():(a.css({"font-size":"75px"}),o.css({"font-size":"75px"}),s.css({"font-size":"75px"}))}})},d=function(){r(),i.width()>=768&&l(),n[0].obj=t},l=function(){var e;e=i.height()>500?100*(window.innerHeight/900)+"px":100*(500/900)+"px",a.css({"font-size":e}),o.css({"font-size":e}),s.css({"font-size":e})};d()},i=function(e){var t=this,n=e,i=$(window),o=n.find(".site__header__btn"),s=n.find(".site__header-menu"),a=$("html"),r=$("body"),d=function(){n.removeClass("opened"),i.width()<1024&&(a.css({"overflow-y":"auto"}),r.css({"overflow-y":"auto"})),s.attr("style","")},l=function(){i.on({scroll:function(){i.scrollTop()>0?n.addClass("fixed"):n.removeClass("fixed")}}),o.on({click:function(){return n.hasClass("opened")?d():c(),!1}})},c=function(){n.addClass("opened"),i.width()<1024&&(a.css({"overflow-y":"hidden"}),r.css({"overflow-y":"hidden"}))},f=function(){l(),n[0].obj=t,i.scrollTop()>n.innerHeight()/2?n.addClass("fixed"):n.removeClass("fixed")};f()},o=function(e){var t,n=this,i=e,o=$(window),s=$(".site__header"),a=15,r=10,d=5,l=20,c=25,f=0,h=function(){$(document).on("mousemove",".main-slider .swiper-slide",function(e){e=e||window.event;var t=$(this),n=t.find(".move1"),f=t.find(".move2"),h=t.find(".move3"),p=t.find(".move4"),g=t.find(".move5");if(o.width()>1024&&!s.hasClass("opened")&&!$(document).find(".move").hasClass("animated_moves")){var w=e.clientX,v=e.clientY,_=i.width()/2,y=i.height()/2,C=(w-_)/_,b=(v-y)/y;o.outerWidth()>1024&&(u(C,b,a,n),u(C,b,a,$(document).find(".copy_1")),m(C,b,r,f),m(C,b,r,$(document).find(".copy_2")),m(C,b,d,h),m(C,b,d,$(document).find(".copy_3")),u(C,b,l,p),u(C,b,l,$(document).find(".copy_4")),u(C,b,c,g),u(C,b,c,$(document).find(".copy_5")))}}),o.on({load:function(){p(),f=o.width()},resize:function(){if(f!=o.width()&&(f=o.width()+1,o.width()<1024&&g()),o.width()>=1024&&screen.width>=1024&&i.css({height:""}),i.hasClass("main-slider_index")){var e=i.parents(".slide__content").next().find(".slide__content-inner"),t=i.find(".swiper-slide-active").innerHeight();setTimeout(function(){i.find(".swiper-slide-active .move").each(function(){var n=$(this),i=n.position().top,o=n.height();if(i+o>t){var s=n.attr("class").replace(/(^.+\D)(\d+)(\D.+$)/i,"$2"),a=0;if($(".copy_move.copy_"+s).length){var r=$(".copy_move.copy_"+s);$(".slide__content").innerHeight()<$(".main-slider").innerHeight()&&(a=$(".main-slider").innerHeight()-$(".slide__content").innerHeight()),r.offset({top:n.offset().top-a,left:n.offset().left}),r.css({bottom:"auto",right:"auto",width:n.width(),height:n.height()})}else{var d=n.clone(!0);d.addClass("copy_move copy_"+s),e.prepend(d),$(".slide__content").innerHeight()<$(".main-slider").innerHeight()&&(a=$(".main-slider").innerHeight()-$(".slide__content").innerHeight()),d.offset({top:n.offset().top-a,left:n.offset().left}),d.css({bottom:"auto",right:"auto",width:n.width(),height:n.height()})}}else{var s=n.attr("class").replace(/(^.+\D)(\d+)(\D.+$)/i,"$2");$(".copy_move.copy_"+s).remove()}})},1500)}}}),window.addEventListener("orientationchange",function(){setTimeout(function(){screen.width<1024&&g()},500)},!1)},p=function(){t=new Swiper(i.find(".swiper-container"),{spaceBetween:0,slidesPerView:1,speed:700,loop:!0,effect:"fade",fade:{crossFade:!0},autoplayDisableOnInteraction:!1,nextButton:i.find(".swiper-button-next")[0],prevButton:i.find(".swiper-button-prev")[0],onInit:function(e){var t=e.slides.filter(".swiper-slide-active"),n=t.parents(".slide__content").index(),o=$(".slide__content").eq(n+1);if(i.hasClass("main-slider_index")){var s=t.innerHeight();t.find(".move").each(function(){var e=$(this),t=e.position().top,n=e.height();if(t+n>s){var i=e.attr("class").replace(/(^.+\D)(\d+)(\D.+$)/i,"$2"),a=0,r=e.clone(!0);r.addClass("copy_move copy_"+i),o.prepend(r),$(".slide__content").innerHeight()<$(".main-slider").innerHeight()&&(a=$(".main-slider").innerHeight()-$(".slide__content").innerHeight()),r.offset({top:e.offset().top-a,left:e.offset().left}),r.css({bottom:"auto",right:"auto",width:e.width(),height:e.height()})}})}},onSlideChangeStart:function(e){var t=e.slides.filter(".swiper-slide-active"),n=t.parents(".slide__content").index();$(".slide__content").eq(n+1).find(".slide__content-inner");$(".copy_move").remove()},onSlideChangeEnd:function(e){var t=e.slides.filter(".swiper-slide-active"),n=t.parents(".slide__content").index(),o=$(".slide__content").eq(n+1).find(".slide__content-inner");if(i.hasClass("main-slider_index")){var s=t.innerHeight();t.find(".move").each(function(){var e=$(this),t=e.position().top,n=e.height();if(t+n>s){var i=e.attr("class").replace(/(^.+\D)(\d+)(\D.+$)/i,"$2"),a=0,r=e.clone(!0);r.addClass("copy_move copy_"+i),o.prepend(r),$(".slide__content").innerHeight()<$(".main-slider").innerHeight()&&(a=$(".main-slider").innerHeight()-$(".slide__content").innerHeight()),r.offset({top:e.offset().top-a,left:e.offset().left}),r.css({bottom:"auto",right:"auto",width:e.width(),height:e.height()})}})}}})},u=function(e,t,n,i){i.css({"-webkit-transform":"translate( "+-(e*n)+"px,"+-(t*n)+"px )",transform:"translate( "+-(e*n)+"px, "+-(t*n)+"px  )"})},m=function(e,t,n,i){i.css({"-webkit-transform":"translate( "+e*n+"px ,"+t*n+"px  )",transform:"translate( "+e*n+"px , "+t*n+"px  )"})},g=function(){var e=o.height();i.parents(".case").length?i.css({height:e+e/5}):i.css({height:e})},w=function(){i[0].obj=n,h(),o.width()<1024&&g()};w()},s=function(e){var t,n=this,i=e,o=$(window),s=!1,a=function(){o.on({resize:function(){o.width()<768?s||(r(),s=!0):s&&(d(),s=!1)}})},r=function(){t=new Swiper(i.find(".swiper-container"),{slidesPerView:1.9,centeredSlides:!0})},d=function(){t.destroy(!0,!0)},l=function(){i[0].obj=n,a(),o.width()<768&&(s||(r(),s=!0))};l()},a=function(e){var t=this,n=e,i=$("html, body"),o=$(".main-slider__inner-pic"),s=function(){n.on({click:function(){return console.log(300),i.animate({scrollTop:o.innerHeight()},300),!1}})},a=function(){n[0].obj=t,s()};a()},r=function(e){var t,n=this,i=e,o=$(window),s=function(){o.on({resize:function(){}})},a=function(){t=new Swiper(i.find(".swiper-container"),{slidesPerView:1,spaceBetween:30,speed:500,loop:!0,effect:"fade",fade:{crossFade:!0},autoplayDisableOnInteraction:!1,nextButton:i.find(".swiper-button-next")[0],prevButton:i.find(".swiper-button-prev")[0]})},r=function(){i[0].obj=n,s(),a()};r()},d=function(e){var t,n,i=e,o=i.find("#contact-google-map"),s=o.data("map-lat"),a=o.data("map-lng"),r=o.data("map-zoom"),d=$(".contacts__cities .btn"),l=$(window),c=function(){l.on({load:function(){u()},resize:function(){u()}}),google.maps.event.addDomListener(window,"resize",function(){if(d.length){var e={lat:d.filter(".active").data("map-lat"),lng:d.filter(".active").data("map-lng")};t.setCenter(e),f(t.getCenter(),0,50)}}),d.on({click:function(){var e=$(this);if(!e.hasClass("active")){d.removeClass("active"),e.addClass("active");var i={lat:$(this).data("map-lat"),lng:$(this).data("map-lng")};n.setPosition(i),setTimeout(function(){google.maps.event.trigger(t,"resize"),t.setCenter(i),f(t.getCenter(),0,50)},300)}return!1}})},f=function(e,n,i){var o=Math.pow(2,t.getZoom()),s=t.getProjection().fromLatLngToPoint(e),a=new google.maps.Point(n/o||0,i/o||0),r=new google.maps.Point(s.x-a.x,s.y+a.y),d=t.getProjection().fromPointToLatLng(r);t.setCenter(d)},h=function(){var e=new google.maps.StyledMapType([{stylers:[{hue:"#b00040"},{saturation:60},{lightness:-40}]},{elementType:"labels.text.fill",stylers:[{color:"#ff6fa4"}]},{featureType:"water",stylers:[{color:"#B61530"}]},{featureType:"road",stylers:[{color:"#B61530"},{}]},{featureType:"road.local",stylers:[{color:"#B61530"},{lightness:6}]},{featureType:"road.highway",stylers:[{color:"#B61530"},{lightness:-25}]},{featureType:"road.arterial",stylers:[{color:"#B61530"},{lightness:-10}]},{featureType:"transit",stylers:[{color:"#B61530"},{lightness:70}]},{featureType:"transit.line",stylers:[{color:"#B61530"},{lightness:90}]},{featureType:"administrative.country",elementType:"labels",stylers:[{visibility:"off"}]},{featureType:"transit.station",elementType:"labels.text.stroke",stylers:[{visibility:"off"}]},{featureType:"transit.station",elementType:"labels.text.fill",stylers:[{color:"#ff6fa4"}]}],{name:"Custom Style"}),i="custom_style";t=new google.maps.Map(o[0],{zoom:r,zoomControl:!1,mapTypeControl:!1,scaleControl:!1,streetViewControl:!1,rotateControl:!1,center:{lat:s,lng:a},mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,i]}}),n=new google.maps.Marker({position:{lat:s,lng:a},map:t}),t.mapTypes.set(i,e),t.setMapTypeId(i),google.maps.event.addListenerOnce(t,"idle",function(){if(d.length){var e={lat:d.filter(".active").data("map-lat"),lng:d.filter(".active").data("map-lng")};t.setCenter(e),f(t.getCenter(),0,50)}})},p=function(){google.maps.event.addDomListener(window,"load",h),c(),u()},u=function(){var e=$(".contacts__info");l.width()>=768?(e.innerHeight()>e.innerWidth()?(i.height(e.innerHeight()+.25*e.innerHeight()),i.width(e.innerHeight()+.25*e.innerHeight())):(i.height(e.innerWidth()+.25*e.innerWidth()),i.width(e.innerWidth()+.25*e.innerWidth())),e.parents(".contacts").hasClass("contacts_2")&&(e.innerHeight()>e.innerWidth()?(i.height(e.innerHeight()+.6*e.innerHeight()),i.width(e.innerHeight()+.6*e.innerHeight())):(i.height(e.innerWidth()+.6*e.innerWidth()),i.width(e.innerWidth()+.6*e.innerWidth())))):i.attr("style","")};p()},l=function(e){var t=e,n=t.find(".swiper-slide"),i=$(window),o=function(){i.on({load:function(){},resize:function(){s()}})},s=function(){n.find(".move").each(function(){var e=$(this),t=e.data("views");if(void 0!=t){for(var n=0;n<t.length;n++){var o;i.width()>=1024?o=t[2]:i.width()<1024&&i.width()>=768?o=t[1]:i.width()<768&&(o=t[0])}o.url.length&&e.css({"background-image":'url("'+o.url+'")',top:"auto",right:"auto",bottom:"auto",left:"auto"});for(var s in o.positions)e.css(s,o.positions[s]/100+"em")}})},a=function(){o(),s()};a()}}();
"use strict";!function(){$(function(){$.each($(".case__hero-btn-down"),function(){new t($(this))}),$.each($(".case__hero"),function(){new n($(this))})});var n=function(n){var t=this,i=n,o=$(window),e=$(".site__header"),s=15,c=10,a=5,d=20,r=25,h=0,f=function(){i.on({mousemove:function(n){n=n||window.event;var t=$(this),h=t.find(".move1"),f=t.find(".move2"),w=t.find(".move3"),p=t.find(".move4"),v=t.find(".move5");if(o.width()>1024&&!e.hasClass("opened")&&!$(document).find(".move").hasClass("animated_moves")){var l=n.clientX,_=n.clientY,g=i.width()/2,b=i.height()/2,x=(l-g)/g,y=(_-b)/b;o.outerWidth()>1024&&(u(x,y,s,h),u(x,y,s,$(document).find(".copy_1")),m(x,y,c,f),m(x,y,c,$(document).find(".copy_2")),m(x,y,a,w),m(x,y,a,$(document).find(".copy_3")),u(x,y,d,p),u(x,y,d,$(document).find(".copy_4")),u(x,y,r,v),u(x,y,r,$(document).find(".copy_5")))}}}),o.on({load:function(){h=o.width()},resize:function(){h!=o.width()&&(h=o.width()+1,o.width()<1024&&w()),o.width()>=1024&&screen.width>=1024&&(i.css({height:""}),i.parents(".case").css({"padding-top":""})),p()}}),window.addEventListener("orientationchange",function(){setTimeout(function(){screen.width<1024&&w()},500)},!1)},u=function(n,t,i,o){o.css({"-webkit-transform":"translate( "+-(n*i)+"px,"+-(t*i)+"px )",transform:"translate( "+-(n*i)+"px, "+-(t*i)+"px  )"})},m=function(n,t,i,o){o.css({"-webkit-transform":"translate( "+n*i+"px ,"+t*i+"px  )",transform:"translate( "+n*i+"px , "+t*i+"px  )"})},w=function(){var n=o.height();i.css({height:n}),i.parents(".case").css({"padding-top":n+20})},p=function(){i.find(".move").each(function(){var n=$(this),t=n.data("views");if(void 0!=t){for(var i=0;i<t.length;i++){var e;o.width()>=1024?e=t[2]:o.width()<1024&&o.width()>=768?e=t[1]:o.width()<768&&(e=t[0])}e.url.length&&n.css({"background-image":'url("'+e.url+'")',top:"auto",right:"auto",bottom:"auto",left:"auto"});for(var s in e.positions)n.css(s,e.positions[s]/100+"em")}})},v=function(){i[0].obj=t,f(),p(),o.width()<1024&&w()};v()},t=function(n){var t=this,i=n,o=$("html, body"),e=$(".case__hero"),s=function(){i.on({click:function(){return o.animate({scrollTop:e.innerHeight()},300),!1}})},c=function(){i[0].obj=t,s()};c()}}();
!function(){$(function(){$(".phone").each(function(){new n($(this))})});var n=function(n){var t=this,a=n,o=a.find(".phone__elem"),s=$(window),r=function(){s.on({scroll:function(){s.width()>=768&&c()}})},c=function(){var n,t=s.height(),o=(a.find(".pnone__part"),a.offset().top),r=o-t/2.5,c=o-t/15;s.scrollTop()<r?n=0:s.scrollTop()>c&&(n=1),s.scrollTop()>r&&!(s.scrollTop()>c)&&(n="animation"),l(r,c,n)},l=function(n,t,a){var r=t-n;o.each(function(){var t=$(this),o=0,c=1,l=t.data("translate"),e=t.data("scale"),i=(l-o)/r*(s.scrollTop()-n),f=c+(e-c)/r*(s.scrollTop()-n);0==a?t.css({"-webkit-transform":"translateY("+o+"%) scale( "+c+" )",transform:"translateY("+o+"%) scale( "+c+" )"}):1==a?t.css({"-webkit-transform":"translateY("+l+"%) scale( "+e+" )",transform:"translateY("+l+"%) scale( "+e+" )"}):t.css({"-webkit-transform":"translateY("+i+"%) scale( "+f+" )",transform:"translateY("+i+"%) scale( "+f+" )"})})},e=function(){a[0].obj=t,c(),r()};e()}}();
//# sourceMappingURL=data:application/json;base64,
