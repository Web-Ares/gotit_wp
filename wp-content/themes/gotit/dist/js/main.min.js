"use strict";!function(){$(function(){new e($(".preloader")),$.each($(".site__index-page"),function(){new n($(this))}),$.each($("body"),function(){new t($(this))}),$.each($(".site__header"),function(){new i($(this))}),$.each($(".main-slider"),function(){new o($(this))}),$.each($(".expertise__items"),function(){new s($(this))}),$.each($(".squad__items"),function(){new r($(this))}),$.each($(".our-clients__items"),function(){new l($(this))}),$.each($(".reviews"),function(){new c($(this))}),$.each($(".contacts__map"),function(){new d($(this))}),$.each($(".case .main-slider__btn-down"),function(){new a($(this))})});var e=function(e){var n=this,t=$(window),i=e,o=$("body"),s=function(){t.on({load:function(){r()}})},a=function(){o[0].preloader=n,s()},r=function(){i.addClass("preloader_loaded"),setTimeout(function(){i.remove(),$(".site").addClass("site__loaded")},500)};a()},n=function(e){var n=this,t=e,i=$(window),o=$("html, body"),s=!1,a=(t.find(".slide__content"),$(".main-slider")),r=a.find(".main-slider__btn-down"),l=function(){i.on({load:function(){i.width()>=1024&&(s||(c(),f(),s=!0))},resize:function(){i.width()>=1024?(s||(c(),s=!0),f()):s&&(d(),s=!1)}}),r.on({click:function(){return i.width()>=1024?(console.log(300),$(this).parents(".case").length?(console.log("case"),o.stop(!0,!1),o.animate({scrollTop:a.innerHeight()},300)):$.fn.fullpage.moveTo(2)):(o.stop(!0,!1),o.animate({scrollTop:a.innerHeight()},300)),!1}})},c=function(){$("#fullpage").fullpage({scrollOverflow:!0,sectionSelector:".slide__content",onLeave:function(e,n,t,i,o){n>1?$(".logo_index").hide():$(".logo_index").show();var s=$(".slide__content").eq(n-1).find(".slide__content-inner>div>div");s.hasClass("reviews")&&s.find(".reviews__item").addClass("animation")}})},d=function(){$.fn.fullpage.destroy("all")},f=function(){},p=function(){t[0].obj=n,l()};p()},t=function(e){var n=this,t=e,i=$(window),o=$("body"),s=function(){i.on({resize:function(){i.width()>=1024?r():o.css({"font-size":"75px"})}})},a=function(){s(),i.width()>=1024&&r(),t[0].obj=n},r=function(){var e;e=i.height()>500?100*(window.innerHeight/900)+"px":100*(500/900)+"px",o.css({"font-size":e})};a()},i=function(e){var n=this,t=e,i=$(window),o=t.find(".site__header__btn"),s=t.find(".site__header-menu"),a=$("html"),r=$("body"),l=function(){t.removeClass("opened"),i.width()<1024&&(a.css({"overflow-y":"auto"}),r.css({"overflow-y":"auto"})),s.attr("style","")},c=function(){i.on({scroll:function(){i.scrollTop()>0?t.addClass("fixed"):t.removeClass("fixed")}}),o.on({click:function(){return t.hasClass("opened")?l():d(),!1}})},d=function(){t.addClass("opened"),i.width()<1024&&(a.css({"overflow-y":"hidden"}),r.css({"overflow-y":"hidden"}))},f=function(){c(),t[0].obj=n,i.scrollTop()>t.innerHeight()?t.addClass("fixed"):t.removeClass("fixed")};f()},o=function(e){var n,t=this,i=e,o=$(window),s=$(".site__header"),a=15,r=10,l=5,c=20,d=25,f=function(){$(document).on("mousemove",".main-slider .swiper-slide",function(e){var n=$(this),t=n.find(".move1"),f=n.find(".move2"),p=n.find(".move3"),w=n.find(".move4"),g=n.find(".move5");if(o.width()>1024&&!s.hasClass("opened")){var v=e.pageX,m=e.pageY,_=i.width()/2,y=i.height()/2,b=(v-_)/_,x=(m-y)/y;o.outerWidth()>1024&&(u(b,x,a,t),h(b,x,r,f),h(b,x,l,p),u(b,x,c,w),u(b,x,c,$(".vegetable4_copy")),u(b,x,d,g))}}),o.on({load:function(){p()},resize:function(){o.width()>=1024&&screen.width>=1024&&i.attr("style","")}}),window.addEventListener("orientationchange",function(){setTimeout(function(){screen.width<1024&&w()},500)},!1)},p=function(){n=new Swiper(i.find(".swiper-container"),{spaceBetween:0,slidesPerView:1,loop:!0,speed:700,effect:"fade",fade:{crossFade:!0},autoplayDisableOnInteraction:!1,nextButton:i.find(".swiper-button-next")[0],prevButton:i.find(".swiper-button-prev")[0],onInit:function(e){var n=e.slides.filter(".swiper-slide-active"),t=n.parents(".slide__content").index(),i=$(".slide__content").eq(t+1);n.hasClass("swiper-slide_vegetable")&&i.prepend(' <div class="vegetables vegetable4 vegetable4_copy move4">                                                        <img src="img/vegetable4.png" alt="">                                                    </div>')},onSlideChangeStart:function(e){var n=e.slides.filter(".swiper-slide-active"),t=n.parents(".slide__content").index();$(".slide__content").eq(t+1).find(".slide__content-inner");n.hasClass("swiper-slide_vegetable")||$(".vegetable4_copy").remove()},onSlideChangeEnd:function(e){var n=e.slides.filter(".swiper-slide-active"),t=n.parents(".slide__content").index(),i=$(".slide__content").eq(t+1).find(".slide__content-inner");n.hasClass("swiper-slide_vegetable")&&i.prepend(' <div class="vegetables vegetable4 vegetable4_copy move4">                                                        <img src="img/vegetable4.png" alt="">                                                    </div>')}})},u=function(e,n,t,i){i.css({"-webkit-transform":"translate( "+-(e*t)+"px,"+-(n*t)+"px )",transform:"translate( "+-(e*t)+"px, "+-(n*t)+"px  )"})},h=function(e,n,t,i){i.css({"-webkit-transform":"translate( "+e*t+"px ,"+n*t+"px  )",transform:"translate( "+e*t+"px , "+n*t+"px  )"})},w=function(){var e=o.height();i.innerHeight(e)},g=function(){i[0].obj=t,f(),o.width()<1024&&w()};g()},s=function(e){var n,t=this,i=e,o=$(window),s=!1,a=function(){o.on({resize:function(){o.width()<768?s||(r(),s=!0):s&&(l(),s=!1)}})},r=function(){n=new Swiper(i.find(".swiper-container"),{slidesPerView:1.9,centeredSlides:!0})},l=function(){n.destroy(!0,!0)},c=function(){i[0].obj=t,a(),o.width()<768&&(s||(r(),s=!0))};c()},a=function(e){var n=this,t=e,i=$("html, body"),o=$(".main-slider__inner-pic"),s=function(){t.on({click:function(){return console.log(300),i.animate({scrollTop:o.innerHeight()},300),!1}})},a=function(){t[0].obj=n,s()};a()},r=function(e){var n,t=this,i=e,o=$(window),s=!1,a=$(".squad"),r=$(".squad__disk"),l=function(){o.on({load:function(){o.width()>=768&&f()},resize:function(){o.width()<768?(s||(c(),s=!0),r.attr("style","")):(s&&(d(),s=!1),f())}})},c=function(){n=new Swiper(i.find(".swiper-container"),{slidesPerView:1.75,centeredSlides:!0})},d=function(){n.destroy(!0,!0)},f=function(){var e,n=a.innerHeight(),t=a.innerWidth();e=n>t?t:n,r.width(e),r.height(e),r.css({"margin-top":"-"+e/2+"px","margin-left":"-"+e/2+"px"})},p=function(){i[0].obj=t,l(),o.width()<768&&(s||(c(),s=!0))};p()},l=function(e){var n,t=this,i=e,o=$(window),s=function(){o.on({resize:function(){}})},a=function(){n=new Swiper(i.find(".swiper-container"),{slidesPerView:5,nextButton:i.find(".swiper-button-next")[0],prevButton:i.find(".swiper-button-prev")[0],breakpoints:{1024:{slidesPerView:3},768:{slidesPerView:1,loop:!0,autoplayDisableOnInteraction:!1}}})},r=function(){i[0].obj=t,s(),a()};r()},c=function(e){var n,t=this,i=e,o=$(window),s=function(){o.on({resize:function(){}})},a=function(){n=new Swiper(i.find(".swiper-container"),{slidesPerView:1,spaceBetween:30,loop:!0,speed:500,effect:"fade",fade:{crossFade:!0},autoplayDisableOnInteraction:!1,nextButton:i.find(".swiper-button-next")[0],prevButton:i.find(".swiper-button-prev")[0]})},r=function(){i[0].obj=t,s(),a()};r()},d=function(e){var n,t,i=e,o=i.find("#contact-google-map"),s=o.data("map-lat"),a=o.data("map-lng"),r=o.data("map-zoom"),l=$(".contacts__cities .btn"),c=$(window),d=function(){c.on({load:function(){h()},resize:function(){h()}}),google.maps.event.addDomListener(window,"resize",function(){if(!i.parents(".contacts_services").length){var e={lat:l.filter(".active").data("map-lat"),lng:l.filter(".active").data("map-lng")};n.setCenter(e),f(n.getCenter(),0,50)}}),l.on({click:function(){var e=$(this);if(!e.hasClass("active")){l.removeClass("active"),e.addClass("active");var i={lat:$(this).data("map-lat"),lng:$(this).data("map-lng")};t.setPosition(i),setTimeout(function(){google.maps.event.trigger(n,"resize"),n.setCenter(i),f(n.getCenter(),0,50)},300)}return!1}})},f=function(e,t,i){var o=Math.pow(2,n.getZoom()),s=n.getProjection().fromLatLngToPoint(e),a=new google.maps.Point(t/o||0,i/o||0),r=new google.maps.Point(s.x-a.x,s.y+a.y),l=n.getProjection().fromPointToLatLng(r);n.setCenter(l)},p=function(){var e=new google.maps.StyledMapType([{stylers:[{hue:"#b00040"},{saturation:60},{lightness:-40}]},{elementType:"labels.text.fill",stylers:[{color:"#ff6fa4"}]},{featureType:"water",stylers:[{color:"#B61530"}]},{featureType:"road",stylers:[{color:"#B61530"},{}]},{featureType:"road.local",stylers:[{color:"#B61530"},{lightness:6}]},{featureType:"road.highway",stylers:[{color:"#B61530"},{lightness:-25}]},{featureType:"road.arterial",stylers:[{color:"#B61530"},{lightness:-10}]},{featureType:"transit",stylers:[{color:"#B61530"},{lightness:70}]},{featureType:"transit.line",stylers:[{color:"#B61530"},{lightness:90}]},{featureType:"administrative.country",elementType:"labels",stylers:[{visibility:"off"}]},{featureType:"transit.station",elementType:"labels.text.stroke",stylers:[{visibility:"off"}]},{featureType:"transit.station",elementType:"labels.text.fill",stylers:[{color:"#ff6fa4"}]}],{name:"Custom Style"}),c="custom_style";n=new google.maps.Map(o[0],{zoom:r,zoomControl:!1,mapTypeControl:!1,scaleControl:!1,streetViewControl:!1,rotateControl:!1,center:{lat:s,lng:a},mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,c]}}),t=new google.maps.Marker({position:{lat:s,lng:a},map:n}),n.mapTypes.set(c,e),n.setMapTypeId(c),google.maps.event.addListenerOnce(n,"idle",function(){if(!i.parents(".contacts_services").length){var e={lat:l.filter(".active").data("map-lat"),lng:l.filter(".active").data("map-lng")};n.setCenter(e),f(n.getCenter(),0,50)}})},u=function(){google.maps.event.addDomListener(window,"load",p),d(),h()},h=function(){var e=$(".contacts__info");c.width()>=768?e.innerHeight()>e.innerWidth()?(i.height(e.innerHeight()+.3*e.innerHeight()),i.width(e.innerHeight()+.3*e.innerHeight())):(i.height(e.innerWidth()+.3*e.innerWidth()),i.width(e.innerWidth()+.3*e.innerWidth())):i.attr("style","")};u()}}();
//# sourceMappingURL=data:application/json;base64,
